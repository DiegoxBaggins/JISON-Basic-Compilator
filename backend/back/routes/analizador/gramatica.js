/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,9],$V8=[1,21],$V9=[1,15],$Va=[2,5,7,8,9,10,11,40,52,74,88],$Vb=[1,27],$Vc=[2,5,7,8,9,10,11,22,27,29,34,35,36,37,38,39,40,52,62,63,64,72,74,80,81,83,84,85,86,87,88,98,99,100,101,102,103,104,105],$Vd=[1,29],$Ve=[1,28],$Vf=[1,30],$Vg=[17,28,40,42],$Vh=[1,34],$Vi=[1,36],$Vj=[1,35],$Vk=[1,41],$Vl=[1,40],$Vm=[1,42],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,30,31,43,44,45,54,72,73],$VT=[2,26],$VU=[2,34],$VV=[2,111],$VW=[28,73],$VX=[1,121],$VY=[19,20,28,43,44,45,54,72,73],$VZ=[1,151],$V_=[1,176],$V$=[1,178],$V01=[1,170],$V11=[1,171],$V21=[1,172],$V31=[1,180],$V41=[1,181],$V51=[1,182],$V61=[1,183],$V71=[1,184],$V81=[1,185],$V91=[13,14,19,20,28,43,44,45,54,72,73],$Va1=[13,14,15,16,17,18,19,20,28,43,44,45,54,72,73],$Vb1=[13,14,15,16,17,18,19,20,21,22,28,43,44,45,54,72,73],$Vc1=[13,14,15,16,17,18,19,20,21,22,23,24,26,28,30,31,43,44,45,54,72,73],$Vd1=[2,7,8,9,10,11,22,27,29,34,35,36,37,38,39,40,62,63,64,72,74,80,81,83,84,85,86,87,98,99,100,101,102,103,104,105],$Ve1=[13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,31,44],$Vf1=[2,36],$Vg1=[1,230],$Vh1=[72,73],$Vi1=[2,37],$Vj1=[2,7,8,9,10,11,22,27,29,34,35,36,37,38,39,40,62,63,64,72,74,79,80,81,83,84,85,86,87,98,99,100,101,102,103,104,105],$Vk1=[72,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONGLOBAL":4,"EOF":5,"TIPO":6,"IDENENTERO":7,"IDENDOUBLE":8,"IDENBOOL":9,"IDENCHAR":10,"IDENSTRING":11,"EXP":12,"IGUALDAD":13,"DIFERENTE":14,"MENOR":15,"MENORIGUAL":16,"MAYOR":17,"MAYORIGUAL":18,"OR":19,"AND":20,"MAS":21,"MENOS":22,"POR":23,"DIVIDIDO":24,"POTENCIA":25,"MODULO":26,"PARIZQ":27,"PARDER":28,"NOT":29,"SUMA2":30,"RESTA2":31,"DEFTER":32,"CASTEO":33,"ENTERO":34,"DECIMAL":35,"CHAR":36,"CADENA":37,"TRUE":38,"FALSE":39,"IDENTIFICADOR":40,"INSTRETUR":41,"CORIZQ":42,"CORDER":43,"INTERR":44,"DOSPUNTOS":45,"ELEMGLOBAL":46,"DECLARACION":47,"ASIGNACION":48,"LISTAGREGAR":49,"METODO":50,"FUNCION":51,"EXEC":52,"LLAMADA":53,"PTCOMA":54,"INSTRUCCIONES":55,"ELEMINST":56,"DEFIF":57,"DEFSWITCH":58,"DEFWHILE":59,"DEFFOR":60,"DEFDOWHILE":61,"BREAK":62,"CONTINUE":63,"RETURN":64,"IMPRIMIR":65,"IGUAL":66,"VECTORES":67,"LISTAS":68,"NEW":69,"LLAVIZQ":70,"LISTAVALORES":71,"LLAVDER":72,"COMA":73,"LIST":74,"INSTOCHARRAY":75,"TOCHARRAY":76,"PUNTO":77,"ADD":78,"ELSE":79,"IF":80,"SWITCH":81,"CASES":82,"DEFAULT":83,"CASE":84,"WHILE":85,"FOR":86,"DO":87,"VOID":88,"LISTAPAR":89,"LISTALLA":90,"INSTLOWER":91,"INSTUPPER":92,"INSLENGTH":93,"INSTRUNCATE":94,"INSROUND":95,"INSTYPE":96,"INSTOSTR":97,"PRINT":98,"TOLOWER":99,"TOUPPER":100,"LENGTH":101,"TRUNCATE":102,"ROUND":103,"TYPEOF":104,"TOSTR":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENENTERO",8:"IDENDOUBLE",9:"IDENBOOL",10:"IDENCHAR",11:"IDENSTRING",13:"IGUALDAD",14:"DIFERENTE",15:"MENOR",16:"MENORIGUAL",17:"MAYOR",18:"MAYORIGUAL",19:"OR",20:"AND",21:"MAS",22:"MENOS",23:"POR",24:"DIVIDIDO",25:"POTENCIA",26:"MODULO",27:"PARIZQ",28:"PARDER",29:"NOT",30:"SUMA2",31:"RESTA2",34:"ENTERO",35:"DECIMAL",36:"CHAR",37:"CADENA",38:"TRUE",39:"FALSE",40:"IDENTIFICADOR",42:"CORIZQ",43:"CORDER",44:"INTERR",45:"DOSPUNTOS",52:"EXEC",54:"PTCOMA",62:"BREAK",63:"CONTINUE",64:"RETURN",66:"IGUAL",69:"NEW",70:"LLAVIZQ",72:"LLAVDER",73:"COMA",74:"LIST",76:"TOCHARRAY",77:"PUNTO",78:"ADD",79:"ELSE",80:"IF",81:"SWITCH",83:"DEFAULT",84:"CASE",85:"WHILE",86:"FOR",87:"DO",88:"VOID",98:"PRINT",99:"TOLOWER",100:"TOUPPER",101:"LENGTH",102:"TRUNCATE",103:"ROUND",104:"TYPEOF",105:"TOSTR"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,2],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,4],[12,6],[32,5],[4,2],[4,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,3],[46,1],[55,2],[55,1],[56,1],[56,1],[56,2],[56,1],[56,1],[56,1],[56,1],[56,1],[56,2],[56,2],[56,2],[56,3],[56,1],[56,1],[56,2],[56,1],[33,4],[47,5],[47,3],[47,1],[47,1],[48,4],[48,7],[48,9],[67,11],[67,9],[71,3],[71,1],[68,12],[68,8],[75,4],[49,7],[57,9],[57,5],[57,7],[58,7],[82,4],[82,5],[82,3],[82,4],[59,7],[60,12],[60,12],[61,9],[50,8],[50,7],[51,8],[51,7],[89,4],[89,2],[53,4],[53,3],[90,3],[90,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[65,5],[91,4],[92,4],[93,4],[94,4],[95,4],[96,4],[97,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('Lectura Correcta'); errorsCopy = errores.map((x) => x); errores = []; return [$$[$0-1], errorsCopy]; 
break;
case 2:
 this.$ = tipoDato.ENTERO; 
break;
case 3:
 this.$ = tipoDato.DOUBLE; 
break;
case 4:
 this.$ = tipoDato.BOOL; 
break;
case 5:
 this.$ = tipoDato.CHAR; 
break;
case 6:
 this.$ = tipoDato.STRING; 
break;
case 7:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.IGUALDAD, $$[$0-2], $$[$0]); 
break;
case 8:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.DIFERENTE, $$[$0-2], $$[$0]); 
break;
case 9:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MENOR, $$[$0-2], $$[$0]); 
break;
case 10:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MENORIGUAL, $$[$0-2], $$[$0]); 
break;
case 11:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MAYOR, $$[$0-2], $$[$0]); 
break;
case 12:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MAYORIGUAL, $$[$0-2], $$[$0]); 
break;
case 13:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.OR, $$[$0-2], $$[$0]); 
break;
case 14:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.AND, $$[$0-2], $$[$0]); 
break;
case 15:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.SUMA, $$[$0-2], $$[$0]); 
break;
case 16:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.RESTA, $$[$0-2], $$[$0]); 
break;
case 17:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0]); 
break;
case 18:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.DIVISION, $$[$0-2], $$[$0]); 
break;
case 19:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.POTENCIA, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MODULO, $$[$0-2], $$[$0]); 
break;
case 21: case 52: case 58: case 59: case 60: case 64:
 this.$ = $$[$0-1]; 
break;
case 22:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.NEGATIVO, $$[$0]); 
break;
case 23:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.NOT, $$[$0]); 
break;
case 24:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.ADICION, $$[$0-1]); 
break;
case 25:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.SUSTRACCION, $$[$0-1]); 
break;
case 26: case 27: case 35: case 41: case 42: case 43: case 44: case 45: case 50: case 51: case 54: case 55: case 56: case 57: case 62: case 63:
 this.$ = $$[$0]; 
break;
case 28:
 this.$ = instrucciones.nuevoValor(tipoValor.ENTERO, Number($$[$0])); 
break;
case 29:
 this.$ = instrucciones.nuevoValor(tipoValor.DOUBLE, Number($$[$0])); 
break;
case 30:
 this.$ = instrucciones.nuevoValor(tipoValor.CHAR, $$[$0]); 
break;
case 31:
 this.$ = instrucciones.nuevoValor(tipoValor.STRING, $$[$0]); 
break;
case 32:
 this.$ = instrucciones.nuevoValor(tipoValor.BOOL, true); 
break;
case 33:
 this.$ = instrucciones.nuevoValor(tipoValor.BOOL, false); 
break;
case 34:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0]); 
break;
case 36:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0-3]); 
break;
case 37:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0-5]); 
break;
case 39: case 48:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 40: case 49: case 103:
 this.$ = [$$[$0]]; 
break;
case 46:
 this.$ = instrucciones.nuevoExc($$[$0-1]); 
break;
case 47: case 65:
 errores.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 53:
 this.$ = instrucciones.nuevoBloqueIf($$[$0]); 
break;
case 61:
 this.$ = $$[$0-2]; 
break;
case 67:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-4], undefined, $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-2], undefined, $$[$0-1], undefined, this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = instrucciones.nuevaAsignacion($$[$0-3], $$[$0-1]); 
break;
case 82:
 $$[$0-8].push(instrucciones.nuevoIf($$[$0-4], $$[$0-1])); this.$ = $$[$0-8]; 
break;
case 83:
 $$[$0-4].push(instrucciones.nuevoElse($$[$0-1])); this.$ = $$[$0-4]; 
break;
case 84:
 this.$ = [instrucciones.nuevoIf($$[$0-4], $$[$0-1])]; 
break;
case 85:
 this.$ = instrucciones.nuevoSwitch($$[$0-4], $$[$0-1]); 
break;
case 86:
 $$[$0-3].push(instrucciones.nuevoDefault($$[$0])); this.$ = $$[$0-3]; 
break;
case 87:
 $$[$0-4].push(instrucciones.nuevoCase($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 88:
 this.$ = [instrucciones.nuevoDefault($$[$0])]; 
break;
case 89:
 this.$ = [instrucciones.nuevoCase($$[$0-2], $$[$0])]; 
break;
case 90:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 91: case 92:
 this.$ = instrucciones.nuevoFor($$[$0-9], $$[$0-8], instrucciones.nuevaAsignacion($$[$0-6], $$[$0-4]), $$[$0-1]); 
break;
case 93:
 this.$ = instrucciones.nuevoDoWhile($$[$0-2], $$[$0-6]); 
break;
case 94:
 this.$ = instrucciones.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 95:
 this.$ = instrucciones.nuevoMetodo($$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 98:
 $$[$0-3].push(instrucciones.nuevoParametro($$[$0-1],$$[$0])); this.$ = $$[$0-3]; 
break;
case 99:
 this.$ = [instrucciones.nuevoParametro($$[$0-1],$$[$0])]; 
break;
case 100:
 this.$ = instrucciones.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 101:
 this.$ = instrucciones.nuevaLlamada($$[$0-2], [], this._$.first_line, this._$.first_column); 
break;
case 102:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 112:
 this.$ = instrucciones.nuevoImprimir($$[$0-2]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:11,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,40:$V6,46:3,47:4,48:5,49:6,50:7,51:8,52:$V7,67:12,68:13,74:$V8,88:$V9},{1:[3]},{2:$V0,5:[1,22],6:11,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,40:$V6,46:23,47:4,48:5,49:6,50:7,51:8,52:$V7,67:12,68:13,74:$V8,88:$V9},o($Va,[2,40]),o($Va,[2,41]),o($Va,[2,42]),o($Va,[2,43]),o($Va,[2,44]),o($Va,[2,45]),{40:[1,25],53:24},o($Va,[2,47]),{40:[1,26],42:$Vb},o($Vc,[2,69]),o($Vc,[2,70]),{42:$Vd,66:$Ve,77:$Vf},{40:[1,31]},o($Vg,[2,2]),o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),{15:[1,32]},{1:[2,1]},o($Va,[2,39]),{54:[1,33]},{27:$Vh},{27:[1,37],54:$Vi,66:$Vj},{43:[1,38]},{12:39,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:68,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,42:[1,69],53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{78:[1,70]},{27:[1,71]},{6:72,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},o($Va,[2,46]),{12:75,22:$Vk,27:$Vl,28:[1,74],29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,90:73,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:76,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vc,[2,68]),{6:79,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,28:[1,78],89:77},{40:[1,80]},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,81]},{6:100,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:99,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:101,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:102,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($VS,$VT),o($VS,[2,27]),o($VS,[2,28]),o($VS,[2,29]),o($VS,[2,30]),o($VS,[2,31]),o($VS,[2,32]),o($VS,[2,33]),o($VS,$VU,{27:$Vh,42:[1,103]}),o($VS,[2,35]),o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,107]),o($VS,[2,108]),o($VS,[2,109]),o($VS,[2,110]),o($VS,$VV),{27:[1,104]},{27:[1,105]},{27:[1,106]},{27:[1,107]},{27:[1,108]},{27:[1,109]},{27:[1,110]},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,111],44:$VR},{12:112,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{27:[1,113]},{6:79,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,28:[1,115],89:114},{17:[1,116]},{28:[1,117],73:[1,118]},o($VS,[2,101]),o($VW,[2,103],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR}),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,119]},{28:[1,120],73:$VX},{70:[1,122]},{40:[1,123]},{66:[1,124]},o($Vc,[2,71]),{12:125,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:126,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:127,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:128,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:129,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:130,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:131,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:132,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:133,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:134,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:135,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:136,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:137,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:138,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($VS,[2,24]),o($VS,[2,25]),{12:139,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,140],30:$VP,31:$VQ,44:$VR},{28:[1,141]},o($VS,[2,22]),o($VY,[2,23],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),{12:142,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,42:[1,143],53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:144,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:145,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:146,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:147,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:148,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:149,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:150,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{66:$VZ},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,152],44:$VR},{12:153,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{28:[1,154],73:$VX},{70:[1,155]},{40:[1,156]},o($VS,[2,100]),{12:157,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vc,[2,67]),{70:[1,158]},{6:159,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:160,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($VW,[2,99]),{69:[1,186],70:[1,187]},o($V91,[2,7],{15:$VD,16:$VE,17:$VF,18:$VG,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($V91,[2,8],{15:$VD,16:$VE,17:$VF,18:$VG,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Va1,[2,9],{21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Va1,[2,10],{21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Va1,[2,11],{21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Va1,[2,12],{21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o([19,28,43,44,45,54,72,73],[2,13],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($VY,[2,14],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Vb1,[2,15],{23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Vb1,[2,16],{23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),o($Vc1,[2,17],{25:$VN}),o($Vc1,[2,18],{25:$VN}),o($Vc1,[2,19],{25:$VN}),o($Vc1,[2,20],{25:$VN}),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,45:[1,188]},o($VS,[2,21]),{12:189,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,190],44:$VR},{12:191,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,192],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,193],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,194],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,195],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,196],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,197],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,198],30:$VP,31:$VQ,44:$VR},{12:199,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{43:[1,200]},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,201],30:$VP,31:$VQ,44:$VR},{70:[1,202]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:203,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{66:[1,204]},o($VW,[2,102],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR}),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:205,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{40:[1,206]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,207],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vd1,[2,49]),o($Vd1,[2,50]),o($Vd1,[2,51]),o($Ve1,$VT,{54:[1,209]}),o($Vd1,[2,53],{79:[1,210]}),o($Vd1,[2,54]),o($Vd1,[2,55]),o($Vd1,[2,56]),o($Vd1,[2,57]),{54:[1,211]},{54:[1,212]},{12:214,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,54:[1,213],91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vd1,[2,62]),o($Vd1,[2,63]),o($Ve1,$VV,{54:[1,215]}),o($Vd1,[2,65]),{40:[1,216],42:$Vb},o($Ve1,$VU,{27:$Vh,42:[1,217],66:$Ve,77:$Vf}),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR},{27:[1,218]},{27:[1,219]},{27:[1,220]},{27:[1,221]},{70:[1,222]},{27:[1,223]},{6:224,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{12:226,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,71:225,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:227,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($VS,[2,66]),o($VS,$Vf1),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,228],44:$VR},o($VS,[2,113]),o($VS,[2,114]),o($VS,[2,115]),o($VS,[2,116]),o($VS,[2,117]),o($VS,[2,118]),o($VS,[2,119]),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,229]},{66:$Vg1},{54:[1,231]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:232,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,233],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{69:[1,234],75:235,76:[1,236]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,237],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($VW,[2,98]),o($Va,[2,97]),o($Vd1,[2,48]),o($Vd1,[2,52]),{70:[1,239],80:[1,238]},o($Vd1,[2,58]),o($Vd1,[2,59]),o($Vd1,[2,60]),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,240]},o($Vd1,[2,64]),{54:$Vi,66:$Vj},{12:241,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,42:[1,242],53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:243,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:244,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:245,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,40:[1,248],47:246,48:247,67:12,68:13,74:$V8},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:249,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:250,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{42:[1,251]},{72:[1,252],73:[1,253]},o($Vh1,[2,77],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR}),o([28,43,44,45,54,72,73],[2,38],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ}),{43:[1,254]},o($Vc,[2,72]),{12:255,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vc,[2,81]),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,256],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Va,[2,95]),{74:[1,257]},{54:[1,258]},{27:[1,259]},o($Va,[2,96]),{27:[1,260]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:261,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vd1,[2,61]),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,262],44:$VR},{12:263,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,264],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,265],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,266],30:$VP,31:$VQ,44:$VR},{12:267,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:268,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{42:$Vd,66:$Ve},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,269],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,270],30:$VP,31:$VQ,44:$VR},{12:271,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{54:[1,272]},{12:273,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($VS,$Vi1),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,274]},o($Va,[2,94]),{15:[1,275]},o($Vc,[2,79]),{12:276,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:277,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,278],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Ve1,$Vf1,{66:$VZ}),{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,279],44:$VR},{70:[1,280]},{70:[1,281]},{70:[1,282]},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,283]},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,54:[1,284]},{85:[1,285]},{54:[1,286]},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,43:[1,287],44:$VR},o($Vc,[2,75]),o($Vh1,[2,76],{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR}),o($Vc,[2,73]),{6:288,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,289],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,290],30:$VP,31:$VQ,44:$VR},o($Vj1,[2,83]),{43:[1,291]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:292,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{82:293,83:[1,294],84:[1,295]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:296,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{40:[1,297]},{40:[1,298]},{27:[1,299]},o($Vd1,[2,112]),{54:[1,300]},{17:[1,301]},{54:[2,80]},{70:[1,302]},o($Ve1,$Vi1,{66:$Vg1}),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,303],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{72:[1,304],83:[1,305],84:[1,306]},{45:[1,307]},{12:308,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,309],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{66:[1,310]},{66:[1,311]},{12:312,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vc,[2,74]),{54:[1,313]},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:314,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vj1,[2,84]),o($Vd1,[2,85]),{45:[1,315]},{12:316,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:317,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,45:[1,318]},o($Vd1,[2,90]),{12:319,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{12:320,22:$Vk,27:$Vl,29:$Vm,32:43,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:52,53:60,91:53,92:54,93:55,94:56,95:57,96:58,97:59,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,321],30:$VP,31:$VQ,44:$VR},o($Vc,[2,78]),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,322],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:323,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,30:$VP,31:$VQ,44:$VR,45:[1,324]},o($Vk1,[2,88],{67:12,68:13,33:44,41:52,91:53,92:54,93:55,94:56,95:57,96:58,97:59,47:162,48:163,32:164,57:165,58:166,59:167,60:168,61:169,65:173,49:174,53:175,6:177,12:179,56:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,22:$Vk,27:$Vl,29:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,62:$V01,63:$V11,64:$V21,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA}),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:325,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,326],30:$VP,31:$VQ,44:$VR},{13:$VB,14:$VC,15:$VD,16:$VE,17:$VF,18:$VG,19:$VH,20:$VI,21:$VJ,22:$VK,23:$VL,24:$VM,25:$VN,26:$VO,28:[1,327],30:$VP,31:$VQ,44:$VR},{54:[1,328]},o($Vj1,[2,82]),o($Vk1,[2,86],{67:12,68:13,33:44,41:52,91:53,92:54,93:55,94:56,95:57,96:58,97:59,47:162,48:163,32:164,57:165,58:166,59:167,60:168,61:169,65:173,49:174,53:175,6:177,12:179,56:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,22:$Vk,27:$Vl,29:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,62:$V01,63:$V11,64:$V21,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA}),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:329,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vk1,[2,89],{67:12,68:13,33:44,41:52,91:53,92:54,93:55,94:56,95:57,96:58,97:59,47:162,48:163,32:164,57:165,58:166,59:167,60:168,61:169,65:173,49:174,53:175,6:177,12:179,56:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,22:$Vk,27:$Vl,29:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,62:$V01,63:$V11,64:$V21,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA}),{70:[1,330]},{70:[1,331]},o($Vd1,[2,93]),o($Vk1,[2,87],{67:12,68:13,33:44,41:52,91:53,92:54,93:55,94:56,95:57,96:58,97:59,47:162,48:163,32:164,57:165,58:166,59:167,60:168,61:169,65:173,49:174,53:175,6:177,12:179,56:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,22:$Vk,27:$Vl,29:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,62:$V01,63:$V11,64:$V21,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA}),{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:332,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,55:333,56:161,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,334],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},{2:$V_,6:177,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:179,22:$Vk,27:$Vl,29:$Vm,32:164,33:44,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$V$,41:52,47:162,48:163,49:174,53:175,56:208,57:165,58:166,59:167,60:168,61:169,62:$V01,63:$V11,64:$V21,65:173,67:12,68:13,72:[1,335],74:$V8,80:$V31,81:$V41,85:$V51,86:$V61,87:$V71,91:53,92:54,93:55,94:56,95:57,96:58,97:59,98:$V81,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA},o($Vd1,[2,91]),o($Vd1,[2,92])],
defaultActions: {22:[2,1],289:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
//importar de otras clases
    const instrucciones = require('../arbol/instrucciones').INSTRUCCION;
    const tipoOperacion = require('../arbol/instrucciones').TIPO_OPERACION;
    const tipoValor = require('../arbol/instrucciones').TIPO_VALOR;
    const tipoDato = require('../arbol/tablasimbolos').TIPO_DATO;
    let errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario linea
break;
case 2://comentario muchaslineas
break;
case 3:return 30;
break;
case 4:return 31;
break;
case 5:return 13;
break;
case 6:return 14;
break;
case 7:return 16;
break;
case 8:return 18;
break;
case 9:return 15;
break;
case 10:return 17;
break;
case 11:return 19;
break;
case 12:return 20;
break;
case 13:return 29;
break;
case 14:return 54;
break;
case 15:return 45;
break;
case 16:return 73;
break;
case 17:return 27;
break;
case 18:return 28;
break;
case 19:return 42;
break;
case 20:return 43;
break;
case 21:return 70;
break;
case 22:return 72;
break;
case 23:return 44;
break;
case 24:return 66;
break;
case 25:return 21;
break;
case 26:return 22;
break;
case 27:return 23;
break;
case 28:return 24;
break;
case 29:return 25;
break;
case 30:return 26;
break;
case 31:return 7;
break;
case 32:return 8;
break;
case 33:return 9;
break;
case 34:return 10;
break;
case 35:return 11;
break;
case 36:return 80;
break;
case 37:return 81;
break;
case 38:return 79;
break;
case 39:return 84;
break;
case 40:return 83;
break;
case 41:return 62;
break;
case 42:return 85;
break;
case 43:return 86;
break;
case 44:return 87;
break;
case 45:return 63;
break;
case 46:return 64;
break;
case 47:return 88;
break;
case 48:return 38;
break;
case 49:return 39;
break;
case 50:return 69;
break;
case 51:return 74;
break;
case 52:return 78;
break;
case 53:return 98;
break;
case 54:return 99;
break;
case 55:return 100;
break;
case 56:return 101;
break;
case 57:return 102;
break;
case 58:return 103;
break;
case 59:return 104;
break;
case 60:return 105;
break;
case 61:return 76;
break;
case 62:return 52;
break;
case 63:
break;
case 64:
break;
case 65:return 35;
break;
case 66:return 34;
break;
case 67:return 40;
break;
case 68: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 36; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 37; 
break;
case 70:return 'SALTOLINEA';
break;
case 71:return 'INVERTIDA';
break;
case 72:return 'TABULACION';
break;
case 73:return 'COMILLA';
break;
case 74:return 'COMILLAS';
break;
case 75:return 77;
break;
case 76:return 5;
break;
case 77: errores.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:roud\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:".*")/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:")/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}