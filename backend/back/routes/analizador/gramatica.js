/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,38],$V1=[1,39],$V2=[1,40],$V3=[1,41],$V4=[1,42],$V5=[1,43],$V6=[1,26],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,44],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,17],$Vi=[1,18],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,37],$Vo=[5,9,10,11,12,13,14,32,51,53,54,64,65,66,70,76,77,79,81,82,87,92,93,94,95],$Vp=[5,9,10,11,12,13,14,32,51,53,54,64,65,66,68,70,72,73,75,76,77,79,81,82,87,92,93,94,95],$Vq=[1,53],$Vr=[1,52],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,62],$VA=[5,9,10,11,12,13,14,17,22,26,27,28,29,30,31,32,42,51,53,54,64,65,66,68,70,72,73,75,76,77,79,81,82,87,92,93,94,95],$VB=[32,38,56,59],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[16,17,18,19,20,21,23,24,25,34,35,36,37,38,39,40,41,52,59,63,74],$VL=[1,89],$VM=[1,96],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,134],$VV=[23,34,35,36,37,38,39,40,41,52],$VW=[16,17,23,34,35,36,37,38,39,40,41,52,59,63,74],$VX=[23,40,41,52],$VY=[59,63],$VZ=[72,73,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"INSTRUCCIONES":6,"INSTPRE":7,"TIPO":8,"IDENENTERO":9,"IDENDOUBLE":10,"IDENBOOL":11,"IDENCHAR":12,"IDENSTRING":13,"VOID":14,"EXP":15,"MAS":16,"MENOS":17,"POR":18,"DIVIDIDO":19,"POTENCIA":20,"MODULO":21,"PARIZQ":22,"PARDER":23,"SUMA2":24,"RESTA2":25,"ENTERO":26,"DECIMAL":27,"CHAR":28,"CADENA":29,"TRUE":30,"FALSE":31,"IDENTIFICADOR":32,"EXPLOGICA":33,"IGUALDAD":34,"DIFERENTE":35,"MENOR":36,"MENORIGUAL":37,"MAYOR":38,"MAYORIGUAL":39,"OR":40,"AND":41,"NOT":42,"DECLARACION":43,"ASIGNACION":44,"CASTEO":45,"DEFIF":46,"DEFSWITCH":47,"DEFWHILE":48,"DEFFOR":49,"DEFDOWHILE":50,"BREAK":51,"PTCOMA":52,"CONTINUE":53,"RETURN":54,"IGUAL":55,"EXPRESION":56,"VECTORES":57,"LISTAS":58,"CORIZQ":59,"CORDER":60,"NEW":61,"LISTAVALORES":62,"COMA":63,"LIST":64,"DEFIC":65,"IF":66,"LLAVIZQ":67,"LLAVDER":68,"ELSE":69,"SWITCH":70,"CASES":71,"LLADER":72,"DEFAULT":73,"DOSPUNTOS":74,"CASE":75,"WHILE":76,"FOR":77,"INSTFOR":78,"DO":79,"IMPRIMIR":80,"INSLOWER":81,"INSUPPER":82,"INSLENGTH":83,"INSTRUNCATE":84,"INSROUND":85,"INSTYPE":86,"PRINT":87,"INSTLOWER":88,"TOLOWER":89,"INSTUPPER":90,"TOUPPER":91,"LENGTH":92,"TRUNCATE":93,"ROUND":94,"TYPEOF":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"IDENENTERO",10:"IDENDOUBLE",11:"IDENBOOL",12:"IDENCHAR",13:"IDENSTRING",14:"VOID",16:"MAS",17:"MENOS",18:"POR",19:"DIVIDIDO",20:"POTENCIA",21:"MODULO",22:"PARIZQ",23:"PARDER",24:"SUMA2",25:"RESTA2",26:"ENTERO",27:"DECIMAL",28:"CHAR",29:"CADENA",30:"TRUE",31:"FALSE",32:"IDENTIFICADOR",34:"IGUALDAD",35:"DIFERENTE",36:"MENOR",37:"MENORIGUAL",38:"MAYOR",39:"MAYORIGUAL",40:"OR",41:"AND",42:"NOT",51:"BREAK",52:"PTCOMA",53:"CONTINUE",54:"RETURN",55:"IGUAL",56:"EXPRESION",59:"CORIZQ",60:"CORDER",61:"NEW",63:"COMA",64:"LIST",65:"DEFIC",66:"IF",67:"LLAVIZQ",68:"LLAVDER",69:"ELSE",70:"SWITCH",72:"LLADER",73:"DEFAULT",74:"DOSPUNTOS",75:"CASE",76:"WHILE",77:"FOR",79:"DO",81:"INSLOWER",82:"INSUPPER",87:"PRINT",89:"TOLOWER",91:"TOUPPER",92:"LENGTH",93:"TRUNCATE",94:"ROUND",95:"TYPEOF"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[4,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,2],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[45,7],[45,6],[43,5],[43,3],[43,1],[43,1],[44,4],[57,11],[57,9],[62,3],[62,1],[58,12],[46,8],[46,5],[46,7],[47,7],[71,4],[71,5],[71,3],[71,4],[48,7],[49,7],[78,4],[78,4],[50,9],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[80,5],[88,5],[90,5],[83,5],[84,5],[85,5],[86,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('Lectura Correcta');
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg,80:16,81:$Vh,82:$Vi,83:19,84:20,85:21,86:22,87:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{1:[3]},{5:[1,45],6:46,7:47,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg,80:16,81:$Vh,82:$Vi,83:19,84:20,85:21,86:22,87:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($Vo,[2,4]),o($Vo,[2,5]),o($Vp,[2,39]),o($Vp,[2,40]),o($Vp,[2,41]),o($Vp,[2,42]),o($Vp,[2,43]),o($Vp,[2,44]),o($Vp,[2,45]),o($Vp,[2,46]),{52:[1,48]},{52:[1,49]},{15:51,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,52:[1,50]},o($Vo,[2,76]),o($Vo,[2,77]),o($Vo,[2,78]),o($Vo,[2,79]),o($Vo,[2,80]),o($Vo,[2,81]),o($Vo,[2,82]),{32:[1,61],59:$Vz},o($VA,[2,55]),o($VA,[2,56]),{55:[1,63]},{66:[1,64],69:[1,65]},{22:[1,66]},{22:[1,67]},{22:[1,68]},{22:[1,69]},{67:[1,70]},{22:[1,71]},{22:[1,72]},{22:[1,73]},{22:[1,74]},{22:[1,75]},o($VB,[2,6]),o($VB,[2,7]),o($VB,[2,8]),o($VB,[2,9]),o($VB,[2,10]),o($VB,[2,11]),{36:[1,76]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,3]),o($Vp,[2,47]),o($Vp,[2,48]),o($Vp,[2,49]),{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ,52:[1,77]},{15:86,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:87,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},o($VK,[2,22]),o($VK,[2,23]),o($VK,[2,24]),o($VK,[2,25]),o($VK,[2,26]),o($VK,[2,27]),o($VK,[2,28]),{52:$VL,55:[1,88]},{60:[1,90]},{15:91,17:$Vq,22:[1,92],26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{22:[1,93]},{67:[1,94]},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:95,42:$VM},{56:[1,98]},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:99,42:$VM},{8:103,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:[1,104],43:101,44:102,57:24,58:25,64:$Va,78:100},{6:105,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{15:106,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{56:[1,107]},{56:[1,108]},{56:[1,109]},{56:[1,110]},{8:111,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5},o($Vp,[2,50]),{15:112,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:113,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:114,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:115,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:116,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:117,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},o($VK,[2,20]),o($VK,[2,21]),{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,23:[1,118],24:$VI,25:$VJ},o($VK,[2,19]),{15:119,17:$Vq,22:[1,120],26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},o($VA,[2,54]),{32:[1,121]},{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ,52:[1,122]},{8:123,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,15:86,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:124,42:$VM},{6:125,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{23:[1,126],34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:135,42:$VM},o($VV,[2,38],{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ}),{23:[1,136]},{23:[1,137],34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU},{23:[1,138]},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:139,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:140,42:$VM},{32:[1,141],59:$Vz},{55:[1,142]},{68:[1,143]},{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,23:[1,144],24:$VI,25:$VJ},{23:[1,145]},{23:[1,146]},{23:[1,147]},{23:[1,148]},{38:[1,149]},o($VW,[2,12],{18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ}),o($VW,[2,13],{18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ}),o($VK,[2,14]),o($VK,[2,15]),o($VK,[2,16]),o($VK,[2,17]),o($VK,[2,18]),{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ,52:[1,150]},{8:151,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,15:86,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{55:[1,152]},o($VA,[2,57]),{56:[1,153]},{23:[1,154],34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU},{68:[1,155]},{67:[1,156]},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:157,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:158,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:159,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:160,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:161,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:162,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:163,42:$VM},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:164,42:$VM},o($VX,[2,37],{34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS}),{67:[1,165]},{67:[1,166]},{67:[1,167]},{34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU,52:[1,168]},{34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU,52:[1,169]},{52:$VL,55:[1,170]},{15:91,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{76:[1,171]},{52:[1,172]},{52:[1,173]},{52:[1,174]},{52:[1,175]},{52:[1,176]},{32:[1,177]},o($VA,[2,53]),{56:[1,178]},{59:[1,180],61:[1,179]},{52:[1,181]},{67:[1,182]},o($Vp,[2,64]),{6:183,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($VV,[2,32]),o($VV,[2,33]),o($VV,[2,34]),o([23,40,52],[2,35],{34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,41:$VU}),o($VX,[2,36],{34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS}),{71:184,73:[1,185],75:[1,186]},{6:187,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{6:188,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{15:189,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:190,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{15:119,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{22:[1,191]},o($Vo,[2,83]),o($Vo,[2,86]),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),{55:[1,192]},{52:[1,193]},{8:194,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5},{15:196,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,62:195},o($Vp,[2,52]),{6:197,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{68:[1,198]},{72:[1,199],73:[1,200],75:[1,201]},{74:[1,202]},{15:203,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{68:[1,204]},{68:[1,205]},{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,23:[2,73],24:$VI,25:$VJ},{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,23:[2,74],24:$VI,25:$VJ},{15:97,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy,33:206,42:$VM},{61:[1,207]},o($Vp,[2,51]),{59:[1,208]},{59:[1,209],63:[1,210]},o($VY,[2,61],{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ}),{68:[1,211]},o($Vp,[2,65]),o($Vp,[2,66]),{74:[1,212]},{15:213,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},{6:214,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ,74:[1,215]},o($Vp,[2,71]),o($Vp,[2,72]),{23:[1,216],34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU},{64:[1,217]},{56:[1,218]},{52:[1,219]},{15:220,17:$Vq,22:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,32:$Vy},o($Vp,[2,63]),{6:221,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ,74:[1,222]},o($VZ,[2,69]),{6:223,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},{52:[1,224]},{36:[1,225]},{59:[1,226]},o($VA,[2,59]),o($VY,[2,60],{16:$VC,17:$VD,18:$VE,19:$VF,20:$VG,21:$VH,24:$VI,25:$VJ}),o($VZ,[2,67]),{6:227,8:23,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5,32:$V6,43:5,44:6,45:7,46:8,47:9,48:10,49:11,50:12,51:$V7,53:$V8,54:$V9,57:24,58:25,64:$Va,65:$Vb,66:$Vc,70:$Vd,76:$Ve,77:$Vf,79:$Vg},o($VZ,[2,70]),o($Vp,[2,75]),{8:228,9:$V0,10:$V1,11:$V2,12:$V3,13:$V4,14:$V5},{52:[1,229]},o($VZ,[2,68]),{38:[1,230]},o($VA,[2,58]),{52:[1,231]},o($VA,[2,62])],
defaultActions: {45:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
//importar de otras clases

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario linea
break;
case 2://comentario muchaslineas
break;
case 3:return 52;
break;
case 4:return 74;
break;
case 5:return 63;
break;
case 6:return 22;
break;
case 7:return 23;
break;
case 8:return 59;
break;
case 9:return 60;
break;
case 10:return 67;
break;
case 11:return 68;
break;
case 12:return 'INTERR';
break;
case 13:return 55;
break;
case 14:return 16;
break;
case 15:return 17;
break;
case 16:return 18;
break;
case 17:return 19;
break;
case 18:return 20;
break;
case 19:return 21;
break;
case 20:return 24;
break;
case 21:return 25;
break;
case 22:return 9;
break;
case 23:return 10;
break;
case 24:return 11;
break;
case 25:return 12;
break;
case 26:return 13;
break;
case 27:return 'SALTOLINEA';
break;
case 28:return 'INVERTIDA';
break;
case 29:return 'COMILLAS';
break;
case 30:return 'TABULACION';
break;
case 31:return 'COMILLA';
break;
case 32:return 34;
break;
case 33:return 35;
break;
case 34:return 36;
break;
case 35:return 37;
break;
case 36:return 38;
break;
case 37:return 39;
break;
case 38:return 40;
break;
case 39:return 41;
break;
case 40:return 42;
break;
case 41:return 66;
break;
case 42:return 70;
break;
case 43:return 69;
break;
case 44:return 75;
break;
case 45:return 73;
break;
case 46:return 51;
break;
case 47:return 76;
break;
case 48:return 77;
break;
case 49:return 79;
break;
case 50:return 53;
break;
case 51:return 54;
break;
case 52:return 14;
break;
case 53:return 'TRUEE';
break;
case 54:return 'FALSEE';
break;
case 55:return 61;
break;
case 56:return 64;
break;
case 57:return 'ADD';
break;
case 58:return 87;
break;
case 59:return 89;
break;
case 60:return 91;
break;
case 61:return 92;
break;
case 62:return 93;
break;
case 63:return 94;
break;
case 64:return 95;
break;
case 65:return 'TOSTR';
break;
case 66:return 'TOCHARRAY';
break;
case 67:return 'EXEC';
break;
case 68:
break;
case 69:
break;
case 70:return 26;
break;
case 71:return 27;
break;
case 72:return 32;
break;
case 73: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 28; 
break;
case 74: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 29; 
break;
case 75:return 5;
break;
case 76: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:roud\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*\b)/i,/^(?:'[^\']'\b)/i,/^(?:"[^\"]*"\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}