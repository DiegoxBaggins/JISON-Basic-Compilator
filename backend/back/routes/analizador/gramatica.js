/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,34],$V2=[1,35],$V3=[1,36],$V4=[1,37],$V5=[1,40],$V6=[1,39],$V7=[1,41],$V8=[1,43],$V9=[1,44],$Va=[1,45],$Vb=[1,46],$Vc=[1,47],$Vd=[1,48],$Ve=[1,24],$Vf=[1,12],$Vg=[1,13],$Vh=[1,14],$Vi=[1,20],$Vj=[1,38],$Vk=[1,26],$Vl=[1,27],$Vm=[1,28],$Vn=[1,29],$Vo=[1,30],$Vp=[1,32],$Vq=[1,31],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[5,7,8,9,10,11,22,27,29,34,35,36,37,38,39,40,56,57,58,64,71,73,79,80,82,83,84,85,87,88,98,99,100,101,102,103,104,105],$Vz=[13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,31,45],$VA=[2,26],$VB=[1,73],$VC=[2,116],$VD=[1,79],$VE=[2,34],$VF=[1,83],$VG=[1,80],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[1,97],$VU=[1,98],$VV=[1,99],$VW=[1,100],$VX=[1,84],$VY=[17,28,40,42],$VZ=[13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,30,31,43,45,46,50,71,72],$V_=[1,126],$V$=[1,125],$V01=[19,20,28,43,45,46,50,71,72],$V11=[28,72],$V21=[13,14,19,20,28,43,45,46,50,71,72],$V31=[13,14,15,16,17,18,19,20,28,43,45,46,50,71,72],$V41=[13,14,15,16,17,18,19,20,21,22,28,43,45,46,50,71,72],$V51=[13,14,15,16,17,18,19,20,21,22,23,24,26,28,30,31,43,45,46,50,71,72],$V61=[1,215],$V71=[2,36],$V81=[1,219],$V91=[5,7,8,9,10,11,22,27,29,34,35,36,37,38,39,40,56,57,58,64,71,73,78,79,80,82,83,84,85,87,88,98,99,100,101,102,103,104,105],$Va1=[2,37],$Vb1=[1,270],$Vc1=[71,72],$Vd1=[71,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"TIPO":6,"IDENENTERO":7,"IDENDOUBLE":8,"IDENBOOL":9,"IDENCHAR":10,"IDENSTRING":11,"EXP":12,"IGUALDAD":13,"DIFERENTE":14,"MENOR":15,"MENORIGUAL":16,"MAYOR":17,"MAYORIGUAL":18,"OR":19,"AND":20,"MAS":21,"MENOS":22,"POR":23,"DIVIDIDO":24,"POTENCIA":25,"MODULO":26,"PARIZQ":27,"PARDER":28,"NOT":29,"SUMA2":30,"RESTA2":31,"DEFTER":32,"CASTEO":33,"ENTERO":34,"DECIMAL":35,"CHAR":36,"CADENA":37,"TRUE":38,"FALSE":39,"IDENTIFICADOR":40,"INSTRETUR":41,"CORIZQ":42,"CORDER":43,"EXPLOGICA":44,"INTERR":45,"DOSPUNTOS":46,"ELEMINST":47,"DECLARACION":48,"ASIGNACION":49,"PTCOMA":50,"DEFIF":51,"DEFSWITCH":52,"DEFWHILE":53,"DEFFOR":54,"DEFDOWHILE":55,"BREAK":56,"CONTINUE":57,"RETURN":58,"IMPRIMIR":59,"LISTAGREGAR":60,"METODO":61,"FUNCION":62,"LLAMADA":63,"EXEC":64,"IGUAL":65,"VECTORES":66,"LISTAS":67,"NEW":68,"LLAVIZQ":69,"LISTAVALORES":70,"LLAVDER":71,"COMA":72,"LIST":73,"INSTOCHARRAY":74,"TOCHARRAY":75,"PUNTO":76,"ADD":77,"ELSE":78,"IF":79,"SWITCH":80,"CASES":81,"DEFAULT":82,"CASE":83,"WHILE":84,"FOR":85,"INSTFOR":86,"DO":87,"VOID":88,"LISTAPAR":89,"LISTALLA":90,"INSTLOWER":91,"INSTUPPER":92,"INSLENGTH":93,"INSTRUNCATE":94,"INSROUND":95,"INSTYPE":96,"INSTOSTR":97,"PRINT":98,"TOLOWER":99,"TOUPPER":100,"LENGTH":101,"TRUNCATE":102,"ROUND":103,"TYPEOF":104,"TOSTR":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENENTERO",8:"IDENDOUBLE",9:"IDENBOOL",10:"IDENCHAR",11:"IDENSTRING",13:"IGUALDAD",14:"DIFERENTE",15:"MENOR",16:"MENORIGUAL",17:"MAYOR",18:"MAYORIGUAL",19:"OR",20:"AND",21:"MAS",22:"MENOS",23:"POR",24:"DIVIDIDO",25:"POTENCIA",26:"MODULO",27:"PARIZQ",28:"PARDER",29:"NOT",30:"SUMA2",31:"RESTA2",34:"ENTERO",35:"DECIMAL",36:"CHAR",37:"CADENA",38:"TRUE",39:"FALSE",40:"IDENTIFICADOR",42:"CORIZQ",43:"CORDER",45:"INTERR",46:"DOSPUNTOS",50:"PTCOMA",56:"BREAK",57:"CONTINUE",58:"RETURN",64:"EXEC",65:"IGUAL",68:"NEW",69:"LLAVIZQ",71:"LLAVDER",72:"COMA",73:"LIST",75:"TOCHARRAY",76:"PUNTO",77:"ADD",78:"ELSE",79:"IF",80:"SWITCH",82:"DEFAULT",83:"CASE",84:"WHILE",85:"FOR",87:"DO",88:"VOID",98:"PRINT",99:"TOLOWER",100:"TOUPPER",101:"LENGTH",102:"TRUNCATE",103:"ROUND",104:"TYPEOF",105:"TOSTR"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,2],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,4],[12,6],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,1],[44,1],[32,5],[4,2],[4,1],[47,1],[47,1],[47,2],[47,1],[47,1],[47,1],[47,1],[47,1],[47,2],[47,2],[47,2],[47,3],[47,1],[47,1],[47,1],[47,1],[47,2],[47,3],[33,4],[48,5],[48,3],[48,1],[48,1],[49,4],[49,7],[49,9],[66,11],[66,9],[70,3],[70,1],[67,12],[67,8],[74,4],[60,7],[51,9],[51,5],[51,7],[52,7],[81,4],[81,5],[81,3],[81,4],[53,7],[54,7],[86,4],[86,4],[55,9],[61,8],[61,7],[62,8],[62,7],[89,4],[89,2],[63,4],[63,3],[90,3],[90,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[59,5],[91,4],[92,4],[93,4],[94,4],[95,4],[96,4],[97,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('Lectura Correcta'); return $$[$0-1];
break;
case 2:
 this.$ = tipoDato.ENTERO; 
break;
case 3:
 this.$ = tipoDato.DOUBLE; 
break;
case 4:
 this.$ = tipoDato.BOOL; 
break;
case 5:
 this.$ = tipoDato.CHAR; 
break;
case 6:
 this.$ = tipoDato.STRING; 
break;
case 7:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.IGUALDAD, $$[$0-2], $$[$0]); 
break;
case 8:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.DIFERENTE, $$[$0-2], $$[$0]); 
break;
case 9:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MENOR, $$[$0-2], $$[$0]); 
break;
case 10:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MENORIGUAL, $$[$0-2], $$[$0]); 
break;
case 11:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MAYOR, $$[$0-2], $$[$0]); 
break;
case 12:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MAYORIGUAL, $$[$0-2], $$[$0]); 
break;
case 13:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.OR, $$[$0-2], $$[$0]); 
break;
case 14:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.AND, $$[$0-2], $$[$0]); 
break;
case 15:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.SUMA, $$[$0-2], $$[$0]); 
break;
case 16:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.RESTA, $$[$0-2], $$[$0]); 
break;
case 17:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0]); 
break;
case 18:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.DIVISON, $$[$0-2], $$[$0]); 
break;
case 19:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.POTENCIA, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MODULO, $$[$0-2], $$[$0]); 
break;
case 21: case 54: case 60: case 61: case 62: case 68:
 this.$ = $$[$0-1]; 
break;
case 22:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.MENOS, $$[$0]); 
break;
case 23:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.NOT, $$[$0]); 
break;
case 24:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.ADICION, $$[$0-1]); 
break;
case 25:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.SUSTRACCION, $$[$0-1]); 
break;
case 26: case 27: case 35: case 52: case 53: case 55: case 56: case 57: case 58: case 59: case 64: case 65: case 66: case 67:
 this.$ = $$[$0]; 
break;
case 28:
 this.$ = instrucciones.nuevoValor(tipoValor.ENTERO, Number($$[$0])); 
break;
case 29:
 this.$ = instrucciones.nuevoValor(tipoValor.DOUBLE, Number($$[$0])); 
break;
case 30:
 this.$ = instrucciones.nuevoValor(tipoValor.CHAR, $$[$0]); 
break;
case 31:
 this.$ = instrucciones.nuevoValor(tipoValor.STRING, $$[$0]); 
break;
case 32:
 this.$ = instrucciones.nuevoValor(tipoValor.BOOL, true); 
break;
case 33:
 this.$ = instrucciones.nuevoValor(tipoValor.BOOL, false); 
break;
case 34:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0]); 
break;
case 36:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0-3]); 
break;
case 37:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0-5]); 
break;
case 50:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 51:
 this.$ = [$$[$0]]; 
break;
case 63: case 69:
 this.$ = $$[$0-2]; 
break;
case 71:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-4], undefined, $$[$0-3], $$[$0-1]); 
break;
case 72:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-2], undefined, $$[$0-1], undefined); 
break;
case 117:
 this.$ = instrucciones.nuevoImprimir($$[$0-2]); 
break;
}
},
table: [{3:1,4:2,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{1:[3]},{5:[1,64],6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,51]),o($Vy,[2,52]),o($Vy,[2,53]),o($Vz,$VA,{50:[1,66]}),o($Vy,[2,55],{78:[1,67]}),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),{50:[1,68]},{50:[1,69]},{12:71,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,50:[1,70],63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,64]),o($Vy,[2,65]),o($Vy,[2,66]),o($Vy,[2,67]),o($Vz,$VC,{50:[1,75]}),{40:[1,77],63:76},{40:[1,78],42:$VD},o($Vy,[2,73]),o($Vy,[2,74]),o($Vz,$VE,{27:$VF,42:[1,81],65:$VG,76:[1,82]}),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX},{27:[1,101]},{27:[1,102]},{27:[1,103]},{27:[1,104]},{69:[1,105]},{27:[1,106]},{40:[1,107]},o($VY,[2,2]),o($VY,[2,3]),o($VY,[2,4]),o($VY,[2,5]),o($VY,[2,6]),{15:[1,108]},{6:110,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:109,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:111,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:112,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VZ,[2,27]),o($VZ,[2,28]),o($VZ,[2,29]),o($VZ,[2,30]),o($VZ,[2,31]),o($VZ,[2,32]),o($VZ,[2,33]),o($VZ,[2,35]),o($VZ,[2,109]),o($VZ,[2,110]),o($VZ,[2,111]),o($VZ,[2,112]),o($VZ,[2,113]),o($VZ,[2,114]),o($VZ,[2,115]),{27:[1,113]},{27:[1,114]},{27:[1,115]},{27:[1,116]},{27:[1,117]},{27:[1,118]},{27:[1,119]},{1:[2,1]},o($Vy,[2,50]),o($Vy,[2,54]),{69:[1,121],79:[1,120]},o($Vy,[2,60]),o($Vy,[2,61]),o($Vy,[2,62]),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,122]},o($VZ,$VA),o($VZ,$VE,{27:$VF,42:[1,123]}),o($VZ,$VC),o($Vy,[2,68]),{50:[1,124]},{27:$VF},{27:[1,127],50:$V_,65:$V$},{43:[1,128]},{12:129,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:130,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,42:[1,131],63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{77:[1,132]},{12:135,22:$V5,27:$V6,28:[1,134],29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,90:133,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:136,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:137,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:138,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:139,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:140,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:141,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:142,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:143,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:144,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:145,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:146,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:147,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:148,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:149,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:150,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VZ,[2,24]),o($VZ,[2,25]),{12:151,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:152,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:153,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{6:157,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,40:[1,158],48:155,49:156,66:22,67:23,73:$Vj,86:154},{4:159,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:160,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{27:[1,161]},{6:162,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,163],30:$VV,31:$VW,45:$VX},{28:[1,164]},o($VZ,[2,22]),o($V01,[2,23],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),{12:165,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:166,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:167,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:168,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:169,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:170,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:171,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{27:[1,172]},{4:173,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,63]),{12:174,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,42:[1,175],63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,69]),{12:176,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,72]),{6:179,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,28:[1,178],89:177},{40:[1,180]},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,181]},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,182],45:$VX},{12:183,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{27:[1,184]},{28:[1,185],72:[1,186]},o($VZ,[2,106]),o($V11,[2,108],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX}),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,46:[1,187]},o($V21,[2,7],{15:$VJ,16:$VK,17:$VL,18:$VM,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V21,[2,8],{15:$VJ,16:$VK,17:$VL,18:$VM,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V31,[2,9],{21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V31,[2,10],{21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V31,[2,11],{21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V31,[2,12],{21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o([19,28,43,45,46,50,71,72],[2,13],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V01,[2,14],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V41,[2,15],{23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V41,[2,16],{23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),o($V51,[2,17],{25:$VT}),o($V51,[2,18],{25:$VT}),o($V51,[2,19],{25:$VT}),o($V51,[2,20],{25:$VT}),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,188],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,189],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,190],30:$VV,31:$VW,45:$VX},{28:[1,191]},{12:192,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:193,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{40:[1,194],42:$VD},{42:[1,195],65:$VG},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,196],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,197],30:$VV,31:$VW,45:$VX},{6:179,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,28:[1,199],89:198},{17:[1,200]},o($VZ,[2,21]),{12:201,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,202],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,203],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,204],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,205],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,206],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,207],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,208],30:$VV,31:$VW,45:$VX},{12:209,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,210],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,211],45:$VX},{12:212,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,213]},{28:[1,214],72:$V61},{69:[1,216]},{40:[1,217]},{65:[1,218]},o($Vy,[2,75]),o($Vz,$V71,{65:$V81}),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,220],45:$VX},{12:221,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VZ,[2,105]),{12:222,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:223,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{69:[1,224]},{69:[1,225]},{69:[1,226]},{69:[1,227]},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,228]},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,229]},{50:$V_,65:$V$},{12:230,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,42:[1,231],63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{84:[1,232]},{50:[1,233]},{28:[1,234],72:$V61},{69:[1,235]},{40:[1,236]},o($VZ,[2,70]),o($VZ,[2,118]),o($VZ,[2,119]),o($VZ,[2,120]),o($VZ,[2,121]),o($VZ,[2,122]),o($VZ,[2,123]),o($VZ,[2,124]),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,237],30:$VV,31:$VW,45:$VX},o($V91,[2,87]),o($VZ,$V71),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,238],45:$VX},o($Vy,[2,71]),{69:[1,239]},{6:240,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{4:241,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($V11,[2,104]),{68:[1,242],69:[1,243]},{12:244,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{43:[1,245]},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,246],30:$VV,31:$VW,45:$VX},o($V11,[2,107],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX}),o([28,43,45,46,50,71,72],[2,49],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW}),{4:247,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{81:248,82:[1,249],83:[1,250]},{4:251,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{4:252,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:253,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{12:254,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,255],45:$VX},{12:256,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{27:[1,257]},o($Vy,[2,117]),{69:[1,258]},{4:259,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{65:[1,260]},{69:[1,261]},{43:[1,262]},{4:263,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{40:[1,264]},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,265],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{6:266,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{12:268,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,70:267,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,269]},o($Vz,$Va1,{65:$Vb1}),{50:[1,271]},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,272],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{71:[1,273],82:[1,274],83:[1,275]},{46:[1,276]},{12:277,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,278],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,279],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[2,96],30:$VV,31:$VW,45:$VX},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[2,97],30:$VV,31:$VW,45:$VX},{65:$V81},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,280],45:$VX},{12:281,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{4:282,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,283],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{68:[1,284],74:285,75:[1,286]},{4:287,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VZ,$Va1),{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,288],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($V11,[2,103]),o($Vy,[2,102]),{42:[1,289]},{71:[1,290],72:[1,291]},o($Vc1,[2,81],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX}),o($Vy,[2,76]),{12:292,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,85]),o($V91,[2,88]),o($Vy,[2,89]),{46:[1,293]},{12:294,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{4:295,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,46:[1,296]},o($Vy,[2,94]),o($Vy,[2,95]),{43:[1,297]},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,298],30:$VV,31:$VW,45:$VX},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,299],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,100]),{73:[1,300]},{50:[1,301]},{27:[1,302]},{6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:65,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,71:[1,303],73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vy,[2,101]),{12:304,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{50:[1,305]},{12:306,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,50:[1,307]},{4:308,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX,46:[1,309]},o($Vd1,[2,92],{48:4,49:5,32:6,51:7,52:8,53:9,54:10,55:11,59:15,60:16,61:17,62:18,63:19,6:21,66:22,67:23,12:25,33:42,41:49,91:50,92:51,93:52,94:53,95:54,96:55,97:56,47:65,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,22:$V5,27:$V6,29:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx}),{4:310,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{65:$Vb1},{50:[1,311]},o($Vy,[2,99]),{15:[1,312]},o($Vy,[2,83]),{12:313,22:$V5,27:$V6,29:$V7,32:72,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VB,41:49,63:74,91:50,92:51,93:52,94:53,95:54,96:55,97:56,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($V91,[2,86]),{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,43:[1,314],45:$VX},o($Vy,[2,79]),o($Vc1,[2,80],{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,30:$VV,31:$VW,45:$VX}),o($Vy,[2,77]),o($Vd1,[2,90],{48:4,49:5,32:6,51:7,52:8,53:9,54:10,55:11,59:15,60:16,61:17,62:18,63:19,6:21,66:22,67:23,12:25,33:42,41:49,91:50,92:51,93:52,94:53,95:54,96:55,97:56,47:65,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,22:$V5,27:$V6,29:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx}),{4:315,6:21,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:25,22:$V5,27:$V6,29:$V7,32:6,33:42,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:49,47:3,48:4,49:5,51:7,52:8,53:9,54:10,55:11,56:$Vf,57:$Vg,58:$Vh,59:15,60:16,61:17,62:18,63:19,64:$Vi,66:22,67:23,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,91:50,92:51,93:52,94:53,95:54,96:55,97:56,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vd1,[2,93],{48:4,49:5,32:6,51:7,52:8,53:9,54:10,55:11,59:15,60:16,61:17,62:18,63:19,6:21,66:22,67:23,12:25,33:42,41:49,91:50,92:51,93:52,94:53,95:54,96:55,97:56,47:65,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,22:$V5,27:$V6,29:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx}),o($Vy,[2,98]),{6:316,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{13:$VH,14:$VI,15:$VJ,16:$VK,17:$VL,18:$VM,19:$VN,20:$VO,21:$VP,22:$VQ,23:$VR,24:$VS,25:$VT,26:$VU,28:[1,317],30:$VV,31:$VW,45:$VX},{50:[1,318]},o($Vd1,[2,91],{48:4,49:5,32:6,51:7,52:8,53:9,54:10,55:11,59:15,60:16,61:17,62:18,63:19,6:21,66:22,67:23,12:25,33:42,41:49,91:50,92:51,93:52,94:53,95:54,96:55,97:56,47:65,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,22:$V5,27:$V6,29:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,73:$Vj,79:$Vk,80:$Vl,84:$Vm,85:$Vn,87:$Vo,88:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx}),{17:[1,319]},{50:[2,84]},o($Vy,[2,78]),{50:[1,320]},o($Vy,[2,82])],
defaultActions: {64:[2,1],317:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
//importar de otras clases
    const instrucciones = require('../arbol/instrucciones').INSTRUCCION;
    const tipoOperacion = require('../arbol/instrucciones').TIPO_OPERACION;
    const tipoValor = require('../arbol/instrucciones').TIPO_VALOR;
    const tipoDato = require('../arbol/tablasimbolos').TIPO_DATO;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario linea
break;
case 2://comentario muchaslineas
break;
case 3:return 30;
break;
case 4:return 31;
break;
case 5:return 13;
break;
case 6:return 14;
break;
case 7:return 16;
break;
case 8:return 18;
break;
case 9:return 15;
break;
case 10:return 17;
break;
case 11:return 19;
break;
case 12:return 20;
break;
case 13:return 29;
break;
case 14:return 50;
break;
case 15:return 46;
break;
case 16:return 72;
break;
case 17:return 27;
break;
case 18:return 28;
break;
case 19:return 42;
break;
case 20:return 43;
break;
case 21:return 69;
break;
case 22:return 71;
break;
case 23:return 45;
break;
case 24:return 65;
break;
case 25:return 21;
break;
case 26:return 22;
break;
case 27:return 23;
break;
case 28:return 24;
break;
case 29:return 25;
break;
case 30:return 26;
break;
case 31:return 7;
break;
case 32:return 8;
break;
case 33:return 9;
break;
case 34:return 10;
break;
case 35:return 11;
break;
case 36:return 79;
break;
case 37:return 80;
break;
case 38:return 78;
break;
case 39:return 83;
break;
case 40:return 82;
break;
case 41:return 56;
break;
case 42:return 84;
break;
case 43:return 85;
break;
case 44:return 87;
break;
case 45:return 57;
break;
case 46:return 58;
break;
case 47:return 88;
break;
case 48:return 38;
break;
case 49:return 39;
break;
case 50:return 68;
break;
case 51:return 73;
break;
case 52:return 77;
break;
case 53:return 98;
break;
case 54:return 99;
break;
case 55:return 100;
break;
case 56:return 101;
break;
case 57:return 102;
break;
case 58:return 103;
break;
case 59:return 104;
break;
case 60:return 105;
break;
case 61:return 75;
break;
case 62:return 64;
break;
case 63:
break;
case 64:
break;
case 65:return 35;
break;
case 66:return 34;
break;
case 67:return 40;
break;
case 68: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 36; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 37; 
break;
case 70:return 'SALTOLINEA';
break;
case 71:return 'INVERTIDA';
break;
case 72:return 'TABULACION';
break;
case 73:return 'COMILLA';
break;
case 74:return 'COMILLAS';
break;
case 75:return 76;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:roud\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:")/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}