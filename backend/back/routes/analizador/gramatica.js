/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,36],$V1=[1,37],$V2=[1,38],$V3=[1,39],$V4=[1,40],$V5=[1,45],$V6=[1,44],$V7=[1,46],$V8=[1,47],$V9=[1,48],$Va=[1,49],$Vb=[1,50],$Vc=[1,51],$Vd=[1,26],$Ve=[1,42],$Vf=[1,14],$Vg=[1,15],$Vh=[1,16],$Vi=[1,22],$Vj=[1,41],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,35],$Vr=[1,53],$Vs=[1,54],$Vt=[1,34],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[5,8,9,10,11,12,15,20,24,25,26,27,28,29,30,41,53,54,55,61,67,71,79,80,82,84,86,87,88,89,90,92,93,97,98,104,109,110,111,112,113],$VA=[1,72],$VB=[14,15,16,17,18,19,22,23,33,34,35,36,37,38,39,40,76],$VC=[2,113],$VD=[1,78],$VE=[5,8,9,10,11,12,15,20,24,25,26,27,28,29,30,41,47,53,54,55,61,67,71,78,79,80,82,84,86,87,88,89,90,92,93,97,98,104,109,110,111,112,113],$VF=[2,24],$VG=[1,82],$VH=[1,79],$VI=[1,80],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[30,37,63,66],$VS=[21,33,34,35,36,37,38,39,40,47,76],$VT=[1,103],$VU=[1,104],$VV=[1,105],$VW=[1,106],$VX=[1,107],$VY=[1,108],$VZ=[1,109],$V_=[1,110],$V$=[14,15,16,17,18,19,21,22,23,33,34,35,36,37,38,39,40,47,67,70,76,78],$V01=[1,121],$V11=[1,120],$V21=[1,141],$V31=[1,136],$V41=[1,137],$V51=[1,138],$V61=[21,39,40,47,76],$V71=[1,181],$V81=[21,70],$V91=[47,78],$Va1=[21,33,34,39,40,47,76],$Vb1=[14,15,21,33,34,35,36,37,38,39,40,47,67,70,76,78],$Vc1=[14,15,16,17,19,21,22,23,33,34,35,36,37,38,39,40,47,67,70,76,78],$Vd1=[67,70],$Ve1=[86,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"INSTRUCCIONES":6,"TIPO":7,"IDENENTERO":8,"IDENDOUBLE":9,"IDENBOOL":10,"IDENCHAR":11,"IDENSTRING":12,"EXP":13,"MAS":14,"MENOS":15,"POR":16,"DIVIDIDO":17,"POTENCIA":18,"MODULO":19,"PARIZQ":20,"PARDER":21,"SUMA2":22,"RESTA2":23,"ENTERO":24,"DECIMAL":25,"CHAR":26,"CADENA":27,"TRUE":28,"FALSE":29,"IDENTIFICADOR":30,"INSTRETUR":31,"EXPLOGICA":32,"IGUALDAD":33,"DIFERENTE":34,"MENOR":35,"MENORIGUAL":36,"MAYOR":37,"MAYORIGUAL":38,"OR":39,"AND":40,"NOT":41,"ELEMINST":42,"DECLARACION":43,"ASIGNACION":44,"CASTEO":45,"DEFTER":46,"PTCOMA":47,"DEFIF":48,"DEFSWITCH":49,"DEFWHILE":50,"DEFFOR":51,"DEFDOWHILE":52,"BREAK":53,"CONTINUE":54,"RETURN":55,"IMPRIMIR":56,"LISTAGREGAR":57,"METODO":58,"FUNCION":59,"LLAMADA":60,"EXEC":61,"IGUAL":62,"EXPRESION":63,"VECTORES":64,"LISTAS":65,"CORIZQ":66,"CORDER":67,"NEW":68,"LISTAVALORES":69,"COMA":70,"LIST":71,"INSTOCHARRAY":72,"TOCHARRAY":73,"PUNTO":74,"ADD":75,"INTERR":76,"INSTRTER":77,"DOSPUNTOS":78,"DEFIC":79,"IF":80,"LLAVIZQ":81,"LLAVDER":82,"ELSE":83,"SWITCH":84,"CASES":85,"LLADER":86,"DEFAULT":87,"CASE":88,"WHILE":89,"FOR":90,"INSTFOR":91,"DO":92,"VOID":93,"LISTAPAR":94,"LISTAVPAR":95,"LISTALLA":96,"INSLOWER":97,"INSUPPER":98,"INSLENGTH":99,"INSTRUNCATE":100,"INSROUND":101,"INSTYPE":102,"INSTOSTR":103,"PRINT":104,"INSTLOWER":105,"TOLOWER":106,"INSTUPPER":107,"TOUPPER":108,"LENGTH":109,"TRUNCATE":110,"ROUND":111,"TYPEOF":112,"TOSTR":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"IDENENTERO",9:"IDENDOUBLE",10:"IDENBOOL",11:"IDENCHAR",12:"IDENSTRING",14:"MAS",15:"MENOS",16:"POR",17:"DIVIDIDO",18:"POTENCIA",19:"MODULO",20:"PARIZQ",21:"PARDER",22:"SUMA2",23:"RESTA2",24:"ENTERO",25:"DECIMAL",26:"CHAR",27:"CADENA",28:"TRUE",29:"FALSE",30:"IDENTIFICADOR",33:"IGUALDAD",34:"DIFERENTE",35:"MENOR",36:"MENORIGUAL",37:"MAYOR",38:"MAYORIGUAL",39:"OR",40:"AND",41:"NOT",47:"PTCOMA",53:"BREAK",54:"CONTINUE",55:"RETURN",61:"EXEC",62:"IGUAL",63:"EXPRESION",66:"CORIZQ",67:"CORDER",68:"NEW",70:"COMA",71:"LIST",73:"TOCHARRAY",74:"PUNTO",75:"ADD",76:"INTERR",78:"DOSPUNTOS",79:"DEFIC",80:"IF",81:"LLAVIZQ",82:"LLAVDER",83:"ELSE",84:"SWITCH",86:"LLADER",87:"DEFAULT",88:"CASE",89:"WHILE",90:"FOR",92:"DO",93:"VOID",95:"LISTAVPAR",97:"INSLOWER",98:"INSUPPER",104:"PRINT",106:"TOLOWER",108:"TOUPPER",109:"LENGTH",110:"TRUNCATE",111:"ROUND",112:"TYPEOF",113:"TOSTR"},
productions_: [0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[6,2],[6,1],[42,1],[42,1],[42,1],[42,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,2],[42,2],[42,2],[42,3],[42,1],[42,1],[42,1],[42,1],[42,2],[42,3],[45,7],[45,6],[43,5],[43,3],[43,1],[43,1],[44,4],[44,7],[44,9],[64,11],[64,9],[69,3],[69,1],[65,12],[65,8],[72,4],[57,7],[46,5],[77,1],[77,1],[77,1],[77,2],[77,2],[77,2],[77,3],[77,1],[48,8],[48,5],[48,7],[49,7],[85,4],[85,5],[85,3],[85,4],[50,7],[51,7],[91,4],[91,4],[52,9],[58,8],[58,7],[59,8],[59,7],[94,4],[94,2],[60,4],[60,3],[96,3],[96,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[56,5],[105,4],[107,4],[99,4],[100,4],[101,4],[102,4],[103,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('Lectura Correcta');
break;
}
},
table: [{3:1,4:2,6:3,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{1:[3]},{5:[1,65]},{5:[2,2],7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,37]),o($Vz,[2,38]),o($Vz,[2,39]),o($Vz,[2,40]),{47:[1,67]},o($Vz,[2,42]),o($Vz,[2,43]),o($Vz,[2,44]),o($Vz,[2,45]),o($Vz,[2,46]),{47:[1,68]},{47:[1,69]},{13:71,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,47:[1,70],60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,51]),o($Vz,[2,52]),o($Vz,[2,53]),o($Vz,[2,54]),o($VB,$VC,{47:[1,74]}),{30:[1,76],60:75},{30:[1,77],66:$VD},o($VE,[2,61]),o($VE,[2,62]),o($VB,$VF,{20:$VG,62:$VH,66:$VI,74:[1,81]}),{33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,76:[1,83]},{80:[1,92],83:[1,93]},{20:[1,94]},{20:[1,95]},{20:[1,96]},{20:[1,97]},{81:[1,98]},{20:[1,99]},{30:[1,100]},o($VR,[2,3]),o($VR,[2,4]),o($VR,[2,5]),o($VR,[2,6]),o($VR,[2,7]),{35:[1,101]},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:102,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VS,[2,35],{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),{13:111,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:112,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V$,[2,18]),o($V$,[2,19]),o($V$,[2,20]),o($V$,[2,21]),o($V$,[2,22]),o($V$,[2,23]),o($V$,[2,25]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($V$,[2,110]),o($V$,[2,111]),o($V$,[2,112]),{20:[1,113]},{20:[1,114]},{20:[1,115]},{20:[1,116]},{20:[1,117]},{1:[2,1]},o($Vz,[2,36]),o($Vz,[2,41]),o($Vz,[2,47]),o($Vz,[2,48]),o($Vz,[2,49]),{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,47:[1,118]},o($V$,$VF,{20:$VG}),o($V$,$VC),o($Vz,[2,55]),{47:[1,119]},{20:$VG},{20:[1,122],47:$V01,62:$V11},{67:[1,123]},{13:124,15:$V5,20:[1,125],24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:126,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,66:[1,127],97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{75:[1,128]},{13:131,15:$V5,20:$V6,21:[1,130],24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,96:129,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:140,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:139,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$V21,31:52,43:133,44:134,45:135,53:$V31,54:$V41,55:$V51,60:73,64:24,65:25,71:$Vj,77:132,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:142,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:143,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:144,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:145,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:146,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:147,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:148,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:149,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{20:[1,150]},{81:[1,151]},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:152,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{63:[1,153]},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:154,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:158,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,30:[1,159],43:156,44:157,64:24,65:25,71:$Vj,91:155},{6:160,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:161,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{20:[1,162]},{7:163,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,26:[1,164]},o($V61,[2,34],{33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO}),{13:165,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:166,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:167,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:168,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:169,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:170,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V$,[2,16]),o($V$,[2,17]),{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,21:[1,171],22:$VZ,23:$V_},o($V$,[2,15]),{63:[1,172]},{63:[1,173]},{63:[1,174]},{63:[1,175]},{63:[1,176]},o($Vz,[2,50]),o($Vz,[2,56]),{13:177,15:$V5,20:[1,178],24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VE,[2,60]),{7:182,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,21:[1,180],94:179,95:$V71},{30:[1,183]},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,47:[1,184]},{7:185,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:111,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,67:[1,186]},{13:187,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{20:[1,188]},{21:[1,189],70:[1,190]},o($V$,[2,103]),o($V81,[2,105],{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),{78:[1,191]},o($V91,[2,75]),o($V91,[2,76]),o($V91,[2,77]),{47:[1,192]},{47:[1,193]},{13:195,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,47:[1,194],60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V91,[2,82],{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),{30:[1,196],66:$VD},o([14,15,16,17,18,19,22,23,47,78],$VF,{20:$VG,62:$VH,66:$VI}),o($Va1,[2,26],{35:$VL,36:$VM,37:$VN,38:$VO}),o($Va1,[2,27],{35:$VL,36:$VM,37:$VN,38:$VO}),o($VS,[2,28]),o($VS,[2,29]),o($VS,[2,30]),o($VS,[2,31]),o([21,39,47,76],[2,32],{33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,40:$VQ}),o($V61,[2,33],{33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO}),{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:197,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:198,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{21:[1,199],33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ},{21:[1,200]},{21:[1,201],33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ},{21:[1,202]},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:203,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:204,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{30:[1,205],66:$VD},{62:[1,206],66:$VI},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,82:[1,207],84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,21:[1,208],22:$VZ,23:$V_},{7:182,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,21:[1,210],94:209,95:$V71},{37:[1,211]},{37:[1,212]},o($Vb1,[2,8],{16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),o($Vb1,[2,9],{16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),o($Vc1,[2,10],{18:$VX}),o($Vc1,[2,11],{18:$VX}),o($Vc1,[2,12],{18:$VX}),o($Vc1,[2,13],{18:$VX}),o($V$,[2,14]),{21:[1,213]},{21:[1,214]},{21:[1,215]},{21:[1,216]},{21:[1,217]},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,47:[1,218]},{7:219,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:111,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{21:[1,220]},{66:[1,221]},{70:[1,222]},{30:[1,223]},{62:[1,224]},o($VE,[2,63]),{63:[1,225]},{62:[1,226]},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,67:[1,227]},{13:228,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V$,[2,102]),{13:229,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:140,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:139,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$V21,31:52,43:133,44:134,45:135,53:$V31,54:$V41,55:$V51,60:73,64:24,65:25,71:$Vj,77:230,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V91,[2,78]),o($V91,[2,79]),o($V91,[2,80]),{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,47:[1,231]},{47:$V01,62:$V11},{21:[1,232],33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,82:[1,233],84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{81:[1,234]},{81:[1,235]},{81:[1,236]},{81:[1,237]},{33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,47:[1,238]},{33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,47:[1,239]},{47:$V01,62:[1,240]},{13:124,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{89:[1,241]},{47:[1,242]},{21:[1,243]},{66:[1,244]},{30:[1,245]},{30:[1,246]},o($V$,[2,117]),o($V$,[2,118]),o($V$,[2,119]),o($V$,[2,120]),o($V$,[2,121]),o($VE,[2,59]),{63:[1,247]},{66:[1,248]},{6:249,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:250,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4},{21:[2,101]},{66:[1,252],68:[1,251]},{47:[1,253]},{13:254,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{67:[1,255]},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,21:[1,256],22:$VZ,23:$V_},o($V81,[2,104],{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),{47:[2,74]},o($V91,[2,81]),{81:[1,257]},o($Vz,[2,84]),{6:258,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{85:259,87:[1,260],88:[1,261]},{6:262,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:263,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:264,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:265,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:177,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{20:[1,266]},o($Vz,[2,114]),{66:[1,267]},{6:268,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{62:[1,269]},{62:[1,270]},{47:[1,271]},{6:272,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,67:[1,273],71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{30:[1,274]},{7:275,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4},{13:277,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,69:276,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VE,[2,58]),{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,47:[1,278]},{62:[1,279]},{47:[1,280]},{6:281,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,82:[1,282],84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{86:[1,283],87:[1,284],88:[1,285]},{78:[1,286]},{13:287,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,82:[1,288],84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,82:[1,289],84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,21:[2,93],22:$VZ,23:$V_},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,21:[2,94],22:$VZ,23:$V_},{13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,32:290,41:$Ve,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:291,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,67:[1,292],71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{68:[1,293]},{72:294,73:[1,295]},o($VE,[2,57]),{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,67:[1,296],71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,99]),{21:[2,100]},{66:[1,297]},{67:[1,298],70:[1,299]},o($Vd1,[2,69],{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),o($VE,[2,64]),{13:300,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,73]),{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,82:[1,301],84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,85]),o($Vz,[2,86]),{78:[1,302]},{13:303,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:304,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,78:[1,305]},o($Vz,[2,91]),o($Vz,[2,92]),{21:[1,306],33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ},{7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:66,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,67:[1,307],71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,97]),{71:[1,308]},{47:[1,309]},{20:[1,310]},o($Vz,[2,98]),{63:[1,311]},{47:[1,312]},{13:313,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,47:[1,314]},o($Vz,[2,83]),{6:315,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_,78:[1,316]},o($Ve1,[2,89],{43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,56:17,57:18,58:19,59:20,60:21,7:23,64:24,65:25,32:27,13:43,31:52,99:55,100:56,101:57,102:58,103:59,42:66,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,41:$Ve,53:$Vf,54:$Vg,55:$Vh,61:$Vi,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),{6:317,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{47:[1,318]},o($Vz,[2,96]),{35:[1,319]},o($VE,[2,71]),{13:320,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$VA,31:52,60:73,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{67:[1,321]},o($VE,[2,67]),o($Vd1,[2,68],{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,22:$VZ,23:$V_}),o($VE,[2,65]),o($Ve1,[2,87],{43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,56:17,57:18,58:19,59:20,60:21,7:23,64:24,65:25,32:27,13:43,31:52,99:55,100:56,101:57,102:58,103:59,42:66,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,41:$Ve,53:$Vf,54:$Vg,55:$Vh,61:$Vi,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),{6:322,7:23,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:43,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:52,32:27,41:$Ve,42:4,43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,53:$Vf,54:$Vg,55:$Vh,56:17,57:18,58:19,59:20,60:21,61:$Vi,64:24,65:25,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:55,100:56,101:57,102:58,103:59,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Ve1,[2,90],{43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,56:17,57:18,58:19,59:20,60:21,7:23,64:24,65:25,32:27,13:43,31:52,99:55,100:56,101:57,102:58,103:59,42:66,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,41:$Ve,53:$Vf,54:$Vg,55:$Vh,61:$Vi,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($Vz,[2,95]),{7:323,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4},{14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,21:[1,324],22:$VZ,23:$V_},{47:[1,325]},o($Ve1,[2,88],{43:5,44:6,45:7,46:8,48:9,49:10,50:11,51:12,52:13,56:17,57:18,58:19,59:20,60:21,7:23,64:24,65:25,32:27,13:43,31:52,99:55,100:56,101:57,102:58,103:59,42:66,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,15:$V5,20:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,41:$Ve,53:$Vf,54:$Vg,55:$Vh,61:$Vi,71:$Vj,79:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,104:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),{37:[1,326]},{47:[2,72]},o($VE,[2,66]),{47:[1,327]},o($VE,[2,70])],
defaultActions: {65:[2,1],223:[2,101],230:[2,74],274:[2,100],324:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
//importar de otras clases

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario linea
break;
case 2://comentario muchaslineas
break;
case 3:return 22;
break;
case 4:return 23;
break;
case 5:return 33;
break;
case 6:return 34;
break;
case 7:return 36;
break;
case 8:return 38;
break;
case 9:return 35;
break;
case 10:return 37;
break;
case 11:return 39;
break;
case 12:return 40;
break;
case 13:return 41;
break;
case 14:return 47;
break;
case 15:return 78;
break;
case 16:return 70;
break;
case 17:return 74;
break;
case 18:return 20;
break;
case 19:return 21;
break;
case 20:return 66;
break;
case 21:return 67;
break;
case 22:return 81;
break;
case 23:return 82;
break;
case 24:return 76;
break;
case 25:return 62;
break;
case 26:return 14;
break;
case 27:return 15;
break;
case 28:return 16;
break;
case 29:return 17;
break;
case 30:return 18;
break;
case 31:return 19;
break;
case 32:return 8;
break;
case 33:return 9;
break;
case 34:return 10;
break;
case 35:return 11;
break;
case 36:return 12;
break;
case 37:return 80;
break;
case 38:return 84;
break;
case 39:return 83;
break;
case 40:return 88;
break;
case 41:return 87;
break;
case 42:return 53;
break;
case 43:return 89;
break;
case 44:return 90;
break;
case 45:return 92;
break;
case 46:return 54;
break;
case 47:return 55;
break;
case 48:return 93;
break;
case 49:return 'TRUEE';
break;
case 50:return 'FALSEE';
break;
case 51:return 68;
break;
case 52:return 71;
break;
case 53:return 75;
break;
case 54:return 104;
break;
case 55:return 106;
break;
case 56:return 108;
break;
case 57:return 109;
break;
case 58:return 110;
break;
case 59:return 111;
break;
case 60:return 112;
break;
case 61:return 113;
break;
case 62:return 73;
break;
case 63:return 61;
break;
case 64:
break;
case 65:
break;
case 66:return 24;
break;
case 67:return 25;
break;
case 68:return 30;
break;
case 69: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 26; 
break;
case 70: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 27; 
break;
case 71:return 'SALTOLINEA';
break;
case 72:return 'INVERTIDA';
break;
case 73:return 'TABULACION';
break;
case 74:return 'COMILLA';
break;
case 75:return 'COMILLAS';
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:roud\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}