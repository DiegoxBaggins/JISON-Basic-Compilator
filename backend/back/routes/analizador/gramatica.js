/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,9],$V8=[1,21],$V9=[1,15],$Va=[2,5,7,8,9,10,11,41,52,73,87],$Vb=[1,28],$Vc=[2,5,7,8,9,10,11,24,29,31,35,36,37,38,39,40,41,52,61,62,63,71,73,79,80,82,83,84,85,86,87,97,98,99,100,101,102,103,104],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,29],$Vh=[1,33],$Vi=[19,30,41,43],$Vj=[1,37],$Vk=[1,39],$Vl=[1,38],$Vm=[1,55],$Vn=[1,44],$Vo=[1,43],$Vp=[1,45],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[30,48],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,32,33,44,48,71,72],$VX=[30,72],$VY=[1,123],$VZ=[13,14,21,22,30,44,48,71,72],$V_=[1,177],$V$=[1,179],$V01=[1,171],$V11=[1,172],$V21=[1,173],$V31=[1,180],$V41=[1,181],$V51=[1,182],$V61=[1,183],$V71=[1,184],$V81=[1,185],$V91=[13,14,15,16,21,22,30,44,48,71,72],$Va1=[13,14,15,16,17,18,19,20,21,22,30,44,48,71,72],$Vb1=[13,14,15,16,17,18,19,20,21,22,23,24,30,44,48,71,72],$Vc1=[13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,30,32,33,44,48,71,72],$Vd1=[2,7,8,9,10,11,41,61,62,63,71,73,79,80,82,83,84,85,86,97],$Ve1=[1,244],$Vf1=[71,72],$Vg1=[2,7,8,9,10,11,41,61,62,63,71,73,78,79,80,82,83,84,85,86,97],$Vh1=[71,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONGLOBAL":4,"EOF":5,"TIPO":6,"IDENENTERO":7,"IDENDOUBLE":8,"IDENBOOL":9,"IDENCHAR":10,"IDENSTRING":11,"EXP":12,"INTERR":13,"DOSPUNTOS":14,"IGUALDAD":15,"DIFERENTE":16,"MENOR":17,"MENORIGUAL":18,"MAYOR":19,"MAYORIGUAL":20,"OR":21,"AND":22,"MAS":23,"MENOS":24,"POR":25,"DIVIDIDO":26,"POTENCIA":27,"MODULO":28,"PARIZQ":29,"PARDER":30,"NOT":31,"SUMA2":32,"RESTA2":33,"CASTEO":34,"ENTERO":35,"DECIMAL":36,"CHAR":37,"CADENA":38,"TRUE":39,"FALSE":40,"IDENTIFICADOR":41,"INSTRETUR":42,"CORIZQ":43,"CORDER":44,"ELEMGLOBAL":45,"DECLARACION":46,"ASIGNACION":47,"PTCOMA":48,"LISTAGREGAR":49,"METODO":50,"FUNCION":51,"EXEC":52,"LLAMADA":53,"INSTRUCCIONES":54,"ELEMINST":55,"DEFIF":56,"DEFSWITCH":57,"DEFWHILE":58,"DEFFOR":59,"DEFDOWHILE":60,"BREAK":61,"CONTINUE":62,"RETURN":63,"IMPRIMIR":64,"IGUAL":65,"VECTORES":66,"LISTAS":67,"NEW":68,"LLAVIZQ":69,"LISTAVALORES":70,"LLAVDER":71,"COMA":72,"LIST":73,"INSTOCHARRAY":74,"TOCHARRAY":75,"PUNTO":76,"ADD":77,"ELSE":78,"IF":79,"SWITCH":80,"CASES":81,"DEFAULT":82,"CASE":83,"WHILE":84,"FOR":85,"DO":86,"VOID":87,"LISTAPAR":88,"LISTALLA":89,"INSTLOWER":90,"INSTUPPER":91,"INSLENGTH":92,"INSTRUNCATE":93,"INSROUND":94,"INSTYPE":95,"INSTOSTR":96,"PRINT":97,"TOLOWER":98,"TOUPPER":99,"LENGTH":100,"TRUNCATE":101,"ROUND":102,"TYPEOF":103,"TOSTR":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENENTERO",8:"IDENDOUBLE",9:"IDENBOOL",10:"IDENCHAR",11:"IDENSTRING",13:"INTERR",14:"DOSPUNTOS",15:"IGUALDAD",16:"DIFERENTE",17:"MENOR",18:"MENORIGUAL",19:"MAYOR",20:"MAYORIGUAL",21:"OR",22:"AND",23:"MAS",24:"MENOS",25:"POR",26:"DIVIDIDO",27:"POTENCIA",28:"MODULO",29:"PARIZQ",30:"PARDER",31:"NOT",32:"SUMA2",33:"RESTA2",35:"ENTERO",36:"DECIMAL",37:"CHAR",38:"CADENA",39:"TRUE",40:"FALSE",41:"IDENTIFICADOR",43:"CORIZQ",44:"CORDER",48:"PTCOMA",52:"EXEC",61:"BREAK",62:"CONTINUE",63:"RETURN",65:"IGUAL",68:"NEW",69:"LLAVIZQ",71:"LLAVDER",72:"COMA",73:"LIST",75:"TOCHARRAY",76:"PUNTO",77:"ADD",78:"ELSE",79:"IF",80:"SWITCH",82:"DEFAULT",83:"CASE",84:"WHILE",85:"FOR",86:"DO",87:"VOID",97:"PRINT",98:"TOLOWER",99:"TOUPPER",100:"LENGTH",101:"TRUNCATE",102:"ROUND",103:"TYPEOF",104:"TOSTR"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,5],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,2],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,4],[12,6],[12,1],[4,2],[4,1],[45,1],[45,2],[45,1],[45,1],[45,1],[45,3],[45,1],[54,2],[54,1],[55,1],[55,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,2],[55,2],[55,2],[55,3],[55,1],[55,1],[55,2],[55,1],[34,4],[46,5],[46,3],[46,1],[46,1],[47,3],[47,2],[47,2],[47,6],[47,8],[66,11],[66,9],[70,3],[70,1],[67,12],[67,8],[74,4],[49,7],[56,9],[56,5],[56,7],[57,7],[81,4],[81,5],[81,3],[81,4],[58,7],[59,10],[59,11],[60,9],[50,8],[50,7],[51,8],[51,7],[88,4],[88,2],[53,4],[53,3],[89,3],[89,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[64,5],[90,4],[91,4],[92,4],[93,4],[94,4],[95,4],[96,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('Lectura Correcta'); errorsCopy = errores.map((x) => x); errores = []; return [$$[$0-1], errorsCopy]; 
break;
case 2:
 this.$ = tipoDato.ENTERO; 
break;
case 3:
 this.$ = tipoDato.DOUBLE; 
break;
case 4:
 this.$ = tipoDato.BOOL; 
break;
case 5:
 this.$ = tipoDato.CHAR; 
break;
case 6:
 this.$ = tipoDato.STRING; 
break;
case 7:
 this.$ = instrucciones.nuevoTer($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 8:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.IGUALDAD, $$[$0-2], $$[$0]); 
break;
case 9:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.DIFERENTE, $$[$0-2], $$[$0]); 
break;
case 10:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MENOR, $$[$0-2], $$[$0]); 
break;
case 11:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MENORIGUAL, $$[$0-2], $$[$0]); 
break;
case 12:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MAYOR, $$[$0-2], $$[$0]); 
break;
case 13:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MAYORIGUAL, $$[$0-2], $$[$0]); 
break;
case 14:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.OR, $$[$0-2], $$[$0]); 
break;
case 15:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.AND, $$[$0-2], $$[$0]); 
break;
case 16:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.SUMA, $$[$0-2], $$[$0]); 
break;
case 17:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.RESTA, $$[$0-2], $$[$0]); 
break;
case 18:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0]); 
break;
case 19:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.DIVISION, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.POTENCIA, $$[$0-2], $$[$0]); 
break;
case 21:
 this.$ = instrucciones.nuevaOperacionBinaria(tipoOperacion.MODULO, $$[$0-2], $$[$0]); 
break;
case 22: case 42: case 51: case 63:
 this.$ = $$[$0-1]; 
break;
case 23:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.NEGATIVO, $$[$0]); 
break;
case 24:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.NOT, $$[$0]); 
break;
case 25:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.ADICION, $$[$0-1]); 
break;
case 26:
 this.$ = instrucciones.nuevaOperacionUnaria(tipoOperacion.SUSTRACCION, $$[$0-1]); 
break;
case 27: case 35: case 41: case 43: case 44: case 45: case 50: case 53: case 54: case 55: case 56: case 61: case 62:
 this.$ = $$[$0]; 
break;
case 28:
 this.$ = instrucciones.nuevoValor(tipoValor.ENTERO, Number($$[$0])); 
break;
case 29:
 this.$ = instrucciones.nuevoValor(tipoValor.DOUBLE, Number($$[$0])); 
break;
case 30:
 this.$ = instrucciones.nuevoValor(tipoValor.CHAR, $$[$0]); 
break;
case 31:
 this.$ = instrucciones.nuevoValor(tipoValor.STRING, $$[$0]); 
break;
case 32:
 this.$ = instrucciones.nuevoValor(tipoValor.BOOL, true); 
break;
case 33:
 this.$ = instrucciones.nuevoValor(tipoValor.BOOL, false); 
break;
case 34:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0]); 
break;
case 36:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0-3]); 
break;
case 37:
 this.$ = instrucciones.nuevoValor(tipoValor.IDENTIFICADOR, $$[$0-5]); 
break;
case 38: case 47: case 64:
 errores.push(instrucciones.nuevoError("Sintactico" ,'Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column,this._$.first_line,this._$.first_column)); 
break;
case 39: case 48:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 40: case 49: case 104:
 this.$ = [$$[$0]]; 
break;
case 46:
 this.$ = instrucciones.nuevoExc($$[$0-1]); 
break;
case 52:
 this.$ = instrucciones.nuevoBloqueIf($$[$0]); 
break;
case 57:
 this.$ = instrucciones.nuevoBreak(); 
break;
case 58:
 this.$ = instrucciones.nuevoContinue(); 
break;
case 59:
 this.$ = instrucciones.nuevoReturn(undefined); 
break;
case 60:
 this.$ = instrucciones.nuevoReturn($$[$0-1]); 
break;
case 66:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-4], undefined, $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = instrucciones.nuevaDeclaracion($$[$0-2], undefined, $$[$0-1], undefined, this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = instrucciones.nuevaAsignacion($$[$0-2], $$[$0]); 
break;
case 71:
 this.$ = instrucciones.nuevaAdicion($$[$0-1]); 
break;
case 72:
 this.$ = instrucciones.nuevaSustraccion($$[$0-1]); 
break;
case 83:
 $$[$0-8].push(instrucciones.nuevoIf($$[$0-4], $$[$0-1])); this.$ = $$[$0-8]; 
break;
case 84:
 $$[$0-4].push(instrucciones.nuevoElse($$[$0-1])); this.$ = $$[$0-4]; 
break;
case 85:
 this.$ = [instrucciones.nuevoIf($$[$0-4], $$[$0-1])]; 
break;
case 86:
 this.$ = instrucciones.nuevoSwitch($$[$0-4], $$[$0-1]); 
break;
case 87:
 $$[$0-3].push(instrucciones.nuevoDefault($$[$0])); this.$ = $$[$0-3]; 
break;
case 88:
 $$[$0-4].push(instrucciones.nuevoCase($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 89:
 this.$ = [instrucciones.nuevoDefault($$[$0])]; 
break;
case 90:
 this.$ = [instrucciones.nuevoCase($$[$0-2], $$[$0])]; 
break;
case 91:
 this.$ = instrucciones.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 92:
 this.$ = instrucciones.nuevoFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 93:
 this.$ = instrucciones.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 94:
 this.$ = instrucciones.nuevoDoWhile($$[$0-2], $$[$0-6]); 
break;
case 95:
 this.$ = instrucciones.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 96:
 this.$ = instrucciones.nuevoMetodo($$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 97:
 this.$ = instrucciones.nuevaFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 98:
 this.$ = instrucciones.nuevaFuncion($$[$0-6], $$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 99:
 $$[$0-3].push(instrucciones.nuevoParametro($$[$0-1],$$[$0])); this.$ = $$[$0-3]; 
break;
case 100:
 this.$ = [instrucciones.nuevoParametro($$[$0-1],$$[$0])]; 
break;
case 101:
 this.$ = instrucciones.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 102:
 this.$ = instrucciones.nuevaLlamada($$[$0-2], [], this._$.first_line, this._$.first_column); 
break;
case 103:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 113:
 this.$ = instrucciones.nuevoImprimir($$[$0-2]); 
break;
case 114:
 this.$ = instrucciones.nuevoLower($$[$0-1]); 
break;
case 115:
 this.$ = instrucciones.nuevoUpper($$[$0-1]); 
break;
case 116:
 this.$ = instrucciones.nuevoLen($$[$0-1]); 
break;
case 117:
 this.$ = instrucciones.nuevoTrun($$[$0-1]); 
break;
case 118:
 this.$ = instrucciones.nuevoRound($$[$0-1]); 
break;
case 119:
 this.$ = instrucciones.nuevoType($$[$0-1]); 
break;
case 120:
 this.$ = instrucciones.nuevoTostr($$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:11,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V6,45:3,46:4,47:5,49:6,50:7,51:8,52:$V7,66:12,67:13,73:$V8,87:$V9},{1:[3]},{2:$V0,5:[1,22],6:11,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V6,45:23,46:4,47:5,49:6,50:7,51:8,52:$V7,66:12,67:13,73:$V8,87:$V9},o($Va,[2,40]),o($Va,[2,41]),{48:[1,24]},o($Va,[2,43]),o($Va,[2,44]),o($Va,[2,45]),{41:[1,26],53:25},o($Va,[2,47]),{41:[1,27],43:$Vb},o($Vc,[2,68]),o($Vc,[2,69]),{32:$Vd,33:$Ve,43:$Vf,65:$Vg,76:$Vh},{41:[1,34]},o($Vi,[2,2]),o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),{17:[1,35]},{1:[2,1]},o($Va,[2,39]),o($Va,[2,42]),{48:[1,36]},{29:$Vj},{29:[1,40],48:$Vk,65:$Vl},{44:[1,41]},{2:$Vm,12:42,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($VE,[2,71]),o($VE,[2,72]),{2:$Vm,12:71,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,43:[1,72],53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{77:[1,73]},{29:[1,74]},{6:75,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},o($Va,[2,46]),{2:$Vm,12:78,24:$Vn,29:$Vo,30:[1,77],31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,89:76,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:79,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($Vc,[2,67]),{6:82,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,30:[1,81],88:80},{41:[1,83]},o($VE,[2,70],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{2:$Vm,6:102,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:101,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:103,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:104,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),o($VW,[2,34],{29:$Vj,43:[1,105]}),o($VW,[2,35]),o($VW,[2,38]),o($VW,[2,105]),o($VW,[2,106]),o($VW,[2,107]),o($VW,[2,108]),o($VW,[2,109]),o($VW,[2,110]),o($VW,[2,111]),o($VW,[2,112]),{29:[1,106]},{29:[1,107]},{29:[1,108]},{29:[1,109]},{29:[1,110]},{29:[1,111]},{29:[1,112]},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,44:[1,113]},{2:$Vm,12:114,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{29:[1,115]},{6:82,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,30:[1,117],88:116},{19:[1,118]},{30:[1,119],72:[1,120]},o($VW,[2,102]),o($VX,[2,104],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,48:[1,121]},{30:[1,122],72:$VY},{69:[1,124]},{41:[1,125]},{65:[1,126]},{2:$Vm,12:127,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:128,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:129,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:130,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:131,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:132,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:133,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:134,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:135,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:136,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:137,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:138,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:139,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:140,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:141,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($VW,[2,25]),o($VW,[2,26]),{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,142],32:$VU,33:$VV},{30:[1,143]},o($VW,[2,23]),o($VZ,[2,24],{15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{2:$Vm,12:144,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,43:[1,145],53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:146,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:147,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:148,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:149,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:150,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:151,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:152,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{65:[1,153]},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,44:[1,154]},{2:$Vm,12:155,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{30:[1,156],72:$VY},{69:[1,157]},{41:[1,158]},o($VW,[2,101]),{2:$Vm,12:159,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($Vc,[2,66]),{69:[1,160]},{6:161,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:162,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($VX,[2,100]),{68:[1,186],69:[1,187]},{13:$VF,14:[1,188],15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV},o($V91,[2,8],{17:$VI,18:$VJ,19:$VK,20:$VL,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($V91,[2,9],{17:$VI,18:$VJ,19:$VK,20:$VL,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Va1,[2,10],{23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Va1,[2,11],{23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Va1,[2,12],{23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Va1,[2,13],{23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o([13,14,21,30,44,48,71,72],[2,14],{15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($VZ,[2,15],{15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Vb1,[2,16],{25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Vb1,[2,17],{25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Vc1,[2,18],{27:$VS}),o($Vc1,[2,19],{27:$VS}),o($Vc1,[2,20],{27:$VS}),o($Vc1,[2,21],{27:$VS}),o($VW,[2,22]),{2:$Vm,12:189,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,44:[1,190]},{2:$Vm,12:191,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,192],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,193],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,194],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,195],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,196],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,197],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,198],32:$VU,33:$VV},{2:$Vm,12:199,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{44:[1,200]},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,201],32:$VU,33:$VV},{69:[1,202]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:203,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{65:[1,204]},o($VX,[2,103],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:205,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{41:[1,206]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,207],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Vd1,[2,49]),o($Vd1,[2,50]),{48:[1,209]},o($Vd1,[2,52],{78:[1,210]}),o($Vd1,[2,53]),o($Vd1,[2,54]),o($Vd1,[2,55]),o($Vd1,[2,56]),{48:[1,211]},{48:[1,212]},{2:$Vm,12:214,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,48:[1,213],53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($Vd1,[2,61]),o($Vd1,[2,62]),{48:[1,215]},o($Vd1,[2,64]),{41:[1,216],43:$Vb},{29:$Vj,32:$Vd,33:$Ve,43:$Vf,65:$Vg,76:$Vh},{29:[1,217]},{29:[1,218]},{29:[1,219]},{29:[1,220]},{69:[1,221]},{29:[1,222]},{6:223,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{2:$Vm,12:225,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,70:224,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:226,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($VW,[2,65]),o($VW,[2,36]),{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,44:[1,227]},o($VW,[2,114]),o($VW,[2,115]),o($VW,[2,116]),o($VW,[2,117]),o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),o($VE,[2,73],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{65:[1,228]},{48:[1,229]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:230,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,231],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{68:[1,232],74:233,75:[1,234]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,235],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($VX,[2,99]),o($Va,[2,98]),o($Vd1,[2,48]),o($Vd1,[2,51]),{69:[1,237],79:[1,236]},o($Vd1,[2,57]),o($Vd1,[2,58]),o($Vd1,[2,59]),{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,48:[1,238]},o($Vd1,[2,63]),{48:$Vk,65:$Vl},{2:$Vm,12:239,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:240,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:241,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$Ve1,46:242,47:243,66:12,67:13,73:$V8},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:245,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{2:$Vm,12:246,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{43:[1,247]},{71:[1,248],72:[1,249]},o($Vf1,[2,78],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o([13,14,30,44,48,71,72],[2,7],{15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{44:[1,250]},{2:$Vm,12:251,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o([2,5,7,8,9,10,11,41,52,61,62,63,71,73,79,80,82,83,84,85,86,87,97],[2,82]),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,252],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Va,[2,96]),{73:[1,253]},{48:[1,254]},{29:[1,255]},o($Va,[2,97]),{29:[1,256]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:257,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Vd1,[2,60]),{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,258],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,259],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,260],32:$VU,33:$VV},{2:$Vm,12:261,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{48:[1,262]},{32:$Vd,33:$Ve,43:$Vf,65:$Vg},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,263],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,264],32:$VU,33:$VV},{2:$Vm,12:265,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{48:[1,266]},{2:$Vm,12:267,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($VW,[2,37]),o($VE,[2,74],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),o($Va,[2,95]),{17:[1,268]},o($Vc,[2,80]),{2:$Vm,12:269,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$Vm,12:270,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,271],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{69:[1,272]},{69:[1,273]},{69:[1,274]},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,48:[1,275]},{2:$Vm,12:276,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{84:[1,277]},{48:[1,278]},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,44:[1,279]},o($Vc,[2,76]),o($Vf1,[2,77],{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV}),{6:280,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,281],32:$VU,33:$VV},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,282],32:$VU,33:$VV},o($Vg1,[2,84]),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:283,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{81:284,82:[1,285],83:[1,286]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:287,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{41:$Ve1,47:288},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV,48:[1,289]},{29:[1,290]},o($Vd1,[2,113]),{48:[1,291]},{19:[1,292]},{48:[2,81]},{69:[1,293]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,294],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{71:[1,295],82:[1,296],83:[1,297]},{14:[1,298]},{2:$Vm,12:299,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,300],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{30:[1,301]},{41:$Ve1,47:302},{2:$Vm,12:303,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($Vc,[2,75]),{48:[1,304]},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:305,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Vg1,[2,85]),o($Vd1,[2,86]),{14:[1,306]},{2:$Vm,12:307,24:$Vn,29:$Vo,31:$Vp,34:46,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:54,53:63,90:56,91:57,92:58,93:59,94:60,95:61,96:62,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:308,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{13:$VF,14:[1,309],15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV},o($Vd1,[2,91]),{69:[1,310]},{30:[1,311]},{13:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,30:[1,312],32:$VU,33:$VV},o($Vc,[2,79]),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,313],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:314,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{13:$VF,14:[1,315],15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,21:$VM,22:$VN,23:$VO,24:$VP,25:$VQ,26:$VR,27:$VS,28:$VT,32:$VU,33:$VV},o($Vh1,[2,89],{66:12,67:13,46:164,47:165,56:166,57:167,58:168,59:169,60:170,64:174,49:175,53:176,6:178,55:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,61:$V01,62:$V11,63:$V21,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81}),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:316,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:317,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{69:[1,318]},{48:[1,319]},o($Vg1,[2,83]),o($Vh1,[2,87],{66:12,67:13,46:164,47:165,56:166,57:167,58:168,59:169,60:170,64:174,49:175,53:176,6:178,55:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,61:$V01,62:$V11,63:$V21,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81}),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:320,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Vh1,[2,90],{66:12,67:13,46:164,47:165,56:166,57:167,58:168,59:169,60:170,64:174,49:175,53:176,6:178,55:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,61:$V01,62:$V11,63:$V21,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81}),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,321],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,54:322,55:163,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Vd1,[2,94]),o($Vh1,[2,88],{66:12,67:13,46:164,47:165,56:166,57:167,58:168,59:169,60:170,64:174,49:175,53:176,6:178,55:208,2:$V_,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,61:$V01,62:$V11,63:$V21,73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81}),o($Vd1,[2,92]),{2:$V_,6:178,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,41:$V$,46:164,47:165,49:175,53:176,55:208,56:166,57:167,58:168,59:169,60:170,61:$V01,62:$V11,63:$V21,64:174,66:12,67:13,71:[1,323],73:$V8,79:$V31,80:$V41,84:$V51,85:$V61,86:$V71,97:$V81},o($Vd1,[2,93])],
defaultActions: {22:[2,1],281:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
//importar de otras clases
    const instrucciones = require('../arbol/instrucciones').INSTRUCCION;
    const tipoOperacion = require('../arbol/instrucciones').TIPO_OPERACION;
    const tipoValor = require('../arbol/instrucciones').TIPO_VALOR;
    const tipoDato = require('../arbol/tablasimbolos').TIPO_DATO;
    let errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario linea
break;
case 2://comentario muchaslineas
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 15;
break;
case 6:return 16;
break;
case 7:return 18;
break;
case 8:return 20;
break;
case 9:return 17;
break;
case 10:return 19;
break;
case 11:return 21;
break;
case 12:return 22;
break;
case 13:return 31;
break;
case 14:return 48;
break;
case 15:return 14;
break;
case 16:return 72;
break;
case 17:return 29;
break;
case 18:return 30;
break;
case 19:return 43;
break;
case 20:return 44;
break;
case 21:return 69;
break;
case 22:return 71;
break;
case 23:return 13;
break;
case 24:return 65;
break;
case 25:return 23;
break;
case 26:return 24;
break;
case 27:return 25;
break;
case 28:return 26;
break;
case 29:return 27;
break;
case 30:return 28;
break;
case 31:return 7;
break;
case 32:return 8;
break;
case 33:return 9;
break;
case 34:return 10;
break;
case 35:return 11;
break;
case 36:return 79;
break;
case 37:return 80;
break;
case 38:return 78;
break;
case 39:return 83;
break;
case 40:return 82;
break;
case 41:return 61;
break;
case 42:return 84;
break;
case 43:return 85;
break;
case 44:return 86;
break;
case 45:return 62;
break;
case 46:return 63;
break;
case 47:return 87;
break;
case 48:return 39;
break;
case 49:return 40;
break;
case 50:return 68;
break;
case 51:return 73;
break;
case 52:return 77;
break;
case 53:return 97;
break;
case 54:return 98;
break;
case 55:return 99;
break;
case 56:return 100;
break;
case 57:return 101;
break;
case 58:return 102;
break;
case 59:return 103;
break;
case 60:return 104;
break;
case 61:return 75;
break;
case 62:return 52;
break;
case 63:
break;
case 64:
break;
case 65:return 36;
break;
case 66:return 35;
break;
case 67:return 41;
break;
case 68: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 37; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 38; 
break;
case 70:return 'SALTOLINEA';
break;
case 71:return 'INVERTIDA';
break;
case 72:return 'TABULACION';
break;
case 73:return 'COMILLA';
break;
case 74:return 'COMILLAS';
break;
case 75:return 76;
break;
case 76:return 5;
break;
case 77: errores.push(instrucciones.nuevoError("Lexico", 'Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column,yy_.yylloc.first_line,yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:")/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}